"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[8227],{5736:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>N,contentTitle:()=>T,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(85893),r=t(11151);const i={},T="SetAbstractKernelParam",o={id:"AbstractKernel/SetAbstractKernelParam",title:"SetAbstractKernelParam",description:"Set kernel parameters",source:"@site/docs/docs-api/AbstractKernel/SetAbstractKernelParam.md",sourceDirName:"AbstractKernel",slug:"/AbstractKernel/SetAbstractKernelParam",permalink:"/docs-api/AbstractKernel/SetAbstractKernelParam",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/AbstractKernel/SetAbstractKernelParam.md",tags:[],version:"current",lastUpdatedAt:1702011327,formattedLastUpdatedAt:"Dec 8, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Set",permalink:"/docs-api/AbstractKernel/Set"},next:{title:"SetCurrentTimeStep",permalink:"/docs-api/AbstractKernel/SetCurrentTimeStep"}},N={},s=[{value:"Interface",id:"interface",level:2}];function I(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"setabstractkernelparam",children:"SetAbstractKernelParam"}),"\n",(0,a.jsx)(n.p,{children:"Set kernel parameters"}),"\n",(0,a.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE SetAbstractKernelParam( &\n    & prefix, &\n    & param, &\n    & name, &\n    & engine, &\n    & coordinateSystem, &\n    & domainFile, &\n    & isCommonDomain, &\n    & gravity, &\n    & timeDependency, &\n    & maxIter, &\n    & nsd, &\n    & nnt, &\n    & tdof, &\n    & dt, &\n    & startTime, &\n    & endTime, &\n    & currentTime, &\n    & currentTimeStep, &\n    & totalTimeStep, &\n    & baseInterpolationForSpace, &\n    & baseContinuityForSpace, &\n    & quadratureTypeForSpace, &\n    & ipTypeForSpace, &\n    & basisTypeForSpace, &\n    & alphaForSpace, &\n    & betaForSpace, &\n    & lambdaForSpace, &\n    & baseInterpolationForTime, &\n    & baseContinuityForTime, &\n    & quadratureTypeForTime, &\n    & ipTypeForTime, &\n    & basisTypeForTime, &\n    & alphaForTime, &\n    & betaForTime, &\n    & lambdaForTime, &\n    & postProcessOpt)\n    CHARACTER(*), INTENT(IN) :: prefix\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseContinuityForSpace\n    !! Type of continuity of basis function for Space\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseContinuityForTime\n    !! Type of continuity of basis function for Time\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseInterpolationForSpace\n    !! Type of interpolation function used for Space\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseInterpolationForTime\n    !! Type of interpolation function used for Time\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: domainFile\n    !! Name of domain file\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: engine\n    !! Engine of the kernel\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: name\n    !! name of the kernel\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: quadratureTypeForSpace\n    !! Type of quadrature for space\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: quadratureTypeForTime\n    !! Type of quadrature for time\n    !! NOTE: Default value is given in AbstractKernelParam\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: coordinateSystem\n    !! Coordinate system of the problem\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: currentTimeStep\n    !! Current time step\n    !! INFO: Default value is 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: maxIter\n    !! maximum number of iterations, required for iterData\n    !! NOTE: Default value is given in AbstractKernelParam\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: nnt\n    !! Number of nodes in time element.\n    !! NOTE: This variable is needed only in the case of\n    !! space-time finite element method.\n    !! The default value is 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: nsd\n    !! Spatial dimension of the problem\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: postProcessOpt\n    !! Postprocessing option for writeData\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tdof\n    !! Total degree of freedom per nodes in the problem\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: timeDependency\n    !! time dependency of the problem\n    !! INFO: Default value is KERNEL_STEADY\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: totalTimeStep\n    !!Total number of time steps\n    !! INFO: Default value is 1\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isCommonDomain\n    !! Is domain comman or different domain for multi-physics\n    REAL(DFP), OPTIONAL, INTENT(IN) :: currentTime\n    !! Current time step of the simulation\n    !! INFO: Default value if 0.0_DFP\n    REAL(DFP), OPTIONAL, INTENT(IN) :: dt\n    !! Time step size\n    !! INFO: Default value is 0.0\n    REAL(DFP), OPTIONAL, INTENT(IN) :: endTime\n    !! Last time of simulation\n    !! INFO: Default value is 0.0_DFP\n    REAL(DFP), OPTIONAL, INTENT(IN) :: gravity(3)\n    !! Acceleration due to gravity\n    !! INFO: Default value if [0,0,0]\n    REAL(DFP), OPTIONAL, INTENT(IN) :: startTime\n    !! Start time of the simulation\n    !! INFO: Default value is 0.0\n    TYPE(ParameterList_), INTENT(INOUT) :: param\n    !! Put parameters here\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipTypeForSpace\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipTypeForTime\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisTypeForSpace\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisTypeForTime\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alphaForSpace\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alphaForTime\n    REAL(DFP), OPTIONAL, INTENT(IN) :: betaForSpace\n    REAL(DFP), OPTIONAL, INTENT(IN) :: betaForTime\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambdaForSpace\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambdaForTime\n  END SUBROUTINE SetAbstractKernelParam\nEND INTERFACE\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(I,{...e})}):I(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>T});var a=t(67294);const r={},i=a.createContext(r);function T(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:T(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);