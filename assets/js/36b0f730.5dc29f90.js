"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[87497],{2173:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=n(85893),r=n(11151);const s={},o="Structure",c={id:"CSRSparsity/CSRSparsity_",title:"Structure",description:"CSRSparsity is data type for handling CSRMatrix in EASIFEM.",source:"@site/docs/docs-api/CSRSparsity/CSRSparsity_.md",sourceDirName:"CSRSparsity",slug:"/CSRSparsity/CSRSparsity_",permalink:"/docs-api/CSRSparsity/CSRSparsity_",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/CSRSparsity/CSRSparsity_.md",tags:[],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CSRSparsityPointer",permalink:"/docs-api/CSRSparsity/CSRSparsityPointer"},next:{title:"CSRSparsity constructor",permalink:"/docs-api/CSRSparsity/CSRSparsity_Constructor"}},a={},d=[];function l(e){const t={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"structure",children:"Structure"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"CSRSparsity_"})," is data type for handling ",(0,i.jsx)(t.code,{children:"CSRMatrix_"})," in EASIFEM."]}),"\n",(0,i.jsxs)(t.p,{children:["It is encapsulated inside ",(0,i.jsx)(t.code,{children:"CSRMatrix_"}),", and contains only the sparsity pattern not the matrix values, which we can use a single instance of ",(0,i.jsx)(t.code,{children:"CSRSparsity_"})," to define several ",(0,i.jsx)(t.code,{children:"CSRMatrix_"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"The structure is given below."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-fortran",children:"TYPE :: CSRSparsity_\nINTEGER( I4B ) :: nnz = 0\nINTEGER( I4B ) :: ncol = 0\nINTEGER( I4B ) :: nrow = 0\nLOGICAL( LGT ) :: isSorted = .FALSE.\nLOGICAL( LGT ) :: isInitiated = .FALSE.\nLOGICAL( LGT ) :: isSparsityLock = .FALSE.\nINTEGER( I4B ), ALLOCATABLE :: IA( : )\nINTEGER( I4B ), ALLOCATABLE :: JA( : )\nTYPE( IntVector_ ), ALLOCATABLE :: row( : )\nTYPE( DOF_ ) :: dof\nEND TYPE CSRSparsity_\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"IA"})," : size of IA is number of rows in the sparse matrix. It contains indices for accessing the entries in ",(0,i.jsx)(t.code,{children:"JA"}),". For example, ",(0,i.jsx)(t.code,{children:"IA( iRow )"})," to ",(0,i.jsx)(t.code,{children:"IA( iRow + 1 ) - 1"})," are indices of entries of matrix of ",(0,i.jsx)(t.code,{children:"iRow"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"JA"}),": size of ",(0,i.jsx)(t.code,{children:"JA"})," is ",(0,i.jsx)(t.code,{children:"NNZ"}),". ",(0,i.jsx)(t.code,{children:"JA"})," contains the column indices."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>o});var i=n(67294);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);