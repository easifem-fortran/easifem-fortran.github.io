"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[34011],{39032:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>f,contentTitle:()=>A,default:()=>F,frontMatter:()=>R,metadata:()=>P,toc:()=>M});var o=i(85893),s=i(11151),t=i(74866),a=i(85162);function r(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node-connectivity information between part of pressure-domain and part of pressure-Domain."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Importing modules and variables"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  CLASS( Mesh_ ), POINTER :: pressureMesh\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.p,{children:"This will create node to node-connectivity data from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2)."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain1=pressureDomain, &\n    & domain2=pressureDomain, dim1=2, entityNum1=1, dim2=2, entityNum2=1)\n  nodeToNode => obj%getNodeToNodePointer()\n  pressureMesh => pressureDomain%getMeshPointer( 2, 1 )\n  pressureNode => pressureDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = pressureMesh%minNptrs, pressureMesh%maxNptrs\n    IF( .NOT. pressureMesh%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( ALL( pressureNode(:,pressureDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ.  &\n      & pressureNode(:, &\n      & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      !CALL Display( "pressure Node = " // TOSTRING(ii)  &\n      !  & // " matches with pressure Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: pressure Node = " // TOSTRING(ii)  &\n        & // " not matches with pressure Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n\n  call OK(.TRUE.)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Cleaning up."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}function d(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node connectivity information between part of velocity-domain and part of velocity-Domain."}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Import modules and define variables"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  CLASS( Mesh_ ), POINTER :: velocityMesh\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\n    & domain2=velocityDomain, dim1=2, entityNum1=1, dim2=2, entityNum2=1)\n  nodeToNode => obj%getNodeToNodePointer()\n  velocityMesh => velocityDomain%getMeshPointer( 2, 1 )\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Simple testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\n    IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) THEN\n      CALL Display( "ERRRO: nodeToNode( "//TOSTRING(ii) // ") = 0 " )\n      STOP\n    END IF\n    IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ.  &\n      & velocityNode(:, &\n      & velocityDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      !CALL Display( "velocity Node = " // TOSTRING(ii)  &\n      !  & // " matches with velocity Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: velocity Node = " // TOSTRING(ii)  &\n        & // " not matches with velocity Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n  CALL OK(.true.)\n'})}),"\n",(0,o.jsx)(n.p,{children:"cleaning up"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function m(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node connectivity information between part of velocity-domain and part of pressure-Domain."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  CLASS( Mesh_ ), POINTER :: velocityMesh\n  CLASS( Mesh_ ), POINTER :: pressureMesh\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\n    & domain2=pressureDomain, dim1=2, entityNum1=1, dim2=2, entityNum2=1)\n  nodeToNode => obj%getNodeToNodePointer()\n  velocityMesh => velocityDomain%getMeshPointer( 2, 1 )\n  pressureMesh => pressureDomain%getMeshPointer( 2, 1 )\n  pressureNode => pressureDomain%getNodeCoordPointer()\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"running some simple tests."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\n    IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\n    IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ. pressureNode(:, &\n      & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      !CALL Display( "velocity Node = " // TOSTRING(ii)  &\n      !  & // " matches with pressure Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: velocity Node = " // TOSTRING(ii)  &\n        & // " not matches with pressure Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n  CALL OK(.true.)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Cleanup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function N(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}function h(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node-connectivity information between part of velocity-domain (dim=2, entity=1) and part of pressure-Domain (dim=1)."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  CLASS( Mesh_ ), POINTER :: velocityMesh\n  CLASS( Mesh_ ), POINTER :: pressureMesh\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ), PARAMETER :: dim1=2, dim2=1, entityNum1=1, entityNum2=1\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\n    & domain2=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\n    & dim2=dim2, entityNum2=entityNum2 )\n  nodeToNode => obj%getNodeToNodePointer()\n  velocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\n  pressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\n  pressureNode => pressureDomain%getNodeCoordPointer()\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Simple testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\n    IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\n    IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ. pressureNode(:, &\n      & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      !CALL Display( "velocity Node = " // TOSTRING(ii)  &\n      !  & // " matches with pressure Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: velocity Node = " // TOSTRING(ii)  &\n        & // " not matches with pressure Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n  call ok(.true.)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Cleanup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}function p(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node-connectivity information between part of velocity-domain (2,1) and part of pressure-Domain (1,2)."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  CLASS( Mesh_ ), POINTER :: velocityMesh\n  CLASS( Mesh_ ), POINTER :: pressureMesh\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ), PARAMETER :: dim1=2, entityNum1=1, dim2=1, entityNum2=2\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\n    & domain2=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\n    & dim2=dim2, entityNum2=entityNum2 )\n  nodeToNode => obj%getNodeToNodePointer()\n  velocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\n  pressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\n  pressureNode => pressureDomain%getNodeCoordPointer()\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Simple testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\n    IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\n    IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ. pressureNode(:, &\n      & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      !CALL Display( "velocity Node = " // TOSTRING(ii)  &\n      !  & // " matches with pressure Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: velocity Node = " // TOSTRING(ii)  &\n        & // " not matches with pressure Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n  call ok(.true.)\n'})}),"\n",(0,o.jsx)(n.p,{children:"cleanup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function T(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}function D(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node-connectivity information between part of velocity-domain (2,1) and part of pressure-Domain (1,3)."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  CLASS( Mesh_ ), POINTER :: velocityMesh\n  CLASS( Mesh_ ), POINTER :: pressureMesh\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ), PARAMETER :: dim1=2, entityNum1=1, dim2=1, entityNum2=3\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\n    & domain2=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\n    & dim2=dim2, entityNum2=entityNum2 )\n  nodeToNode => obj%getNodeToNodePointer()\n  velocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\n  pressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\n  pressureNode => pressureDomain%getNodeCoordPointer()\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Simple testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\n    IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\n    IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ. pressureNode(:, &\n      & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      !CALL Display( "velocity Node = " // TOSTRING(ii)  &\n      !  & // " matches with pressure Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: velocity Node = " // TOSTRING(ii)  &\n        & // " not matches with pressure Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n  call ok(.true.)\n'})}),"\n",(0,o.jsx)(n.p,{children:"clean up"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function E(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(D,{...e})}):D(e)}function L(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node connectivity information between part of velocity-domain (2,1) and part of pressure-Domain (1,4)."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  CLASS( Mesh_ ), POINTER :: velocityMesh\n  CLASS( Mesh_ ), POINTER :: pressureMesh\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ), PARAMETER :: dim1=2, entityNum1=1, dim2=1, entityNum2=4\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\n    & domain2=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\n    & dim2=dim2, entityNum2=entityNum2 )\n  nodeToNode => obj%getNodeToNodePointer()\n  velocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\n  pressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\n  pressureNode => pressureDomain%getNodeCoordPointer()\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Simple testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\n    IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\n    IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ. pressureNode(:, &\n      & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      CALL Display( "velocity Node = " // TOSTRING(ii)  &\n        & // " matches with pressure Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: velocity Node = " // TOSTRING(ii)  &\n        & // " not matches with pressure Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n'})}),"\n",(0,o.jsx)(n.p,{children:"cleanup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function y(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(L,{...e})}):L(e)}function j(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node connectivity information between part of velocity-domain (2,1) and part of pressure-Domain (2,1)."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  CLASS( Mesh_ ), POINTER :: velocityMesh\n  CLASS( Mesh_ ), POINTER :: pressureMesh\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ), PARAMETER :: dim1=2, entityNum1=1, dim2=2, entityNum2=1\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain2=velocityDomain, &\n    & domain1=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\n    & dim2=dim2, entityNum2=entityNum2 )\n  nodeToNode => obj%getNodeToNodePointer()\n  velocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\n  pressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\n  pressureNode => pressureDomain%getNodeCoordPointer()\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Simple testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = pressureMesh%minNptrs, pressureMesh%maxNptrs\n    IF( .NOT. pressureMesh%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\n    IF( ALL( pressureNode(:,pressureDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ. velocityNode(:, &\n      & velocityDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      CALL Display( "pressure Node = " // TOSTRING(ii)  &\n        & // " matches with velocity Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: pressure Node = " // TOSTRING(ii)  &\n        & // " not matches with velocity Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n'})}),"\n",(0,o.jsx)(n.p,{children:"Cleanup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function g(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(j,{...e})}):j(e)}function x(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node connectivity information between  velocity-domain and pressure-Domain."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\n    & domain2=pressureDomain )\n  nodeToNode => obj%getNodeToNodePointer()\n  pressureNode => pressureDomain%getNodeCoordPointer()\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Simple testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = velocityDomain%minNptrs, velocityDomain%maxNptrs\n    IF( .NOT. velocityDomain%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\n    IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ. pressureNode(:, &\n      & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      CALL Display( "velocity Node = " // TOSTRING(ii)  &\n        & // " matches with pressure Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: velocity Node = " // TOSTRING(ii)  &\n        & // " not matches with pressure Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n'})}),"\n",(0,o.jsx)(n.p,{children:"cleanup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function I(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}function v(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this example we will generate node to node connectivity information between velocity-domain and pressure-domain."}),"\n",(0,o.jsx)(n.p,{children:"Pressure domain consists Triangle3 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri3",src:i(22534).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.p,{children:"Velocity domain consists Triangle6 elements as shown below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"mesh_tri6",src:i(63148).Z+"",width:"916",height:"955"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE(DomainConnectivity_) :: obj\n  TYPE( Domain_ ) :: pressureDomain\n  TYPE( Domain_ ) :: velocityDomain\n  TYPE( HDF5File_ ) :: pressureMeshFile\n  TYPE( HDF5File_ ) :: velocityMeshFile\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\n  REAL( DFP ), POINTER :: pressureNode( :, : )\n  REAL( DFP ), POINTER :: velocityNode( :, : )\n  INTEGER( I4B ) :: ii\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityMeshFile%Initiate( FileName="./mesh_tri6.h5", MODE="READ" )\n  CALL velocityMeshFile%Open()\n  CALL pressureMeshFile%Initiate( FileName="./mesh_tri3.h5", MODE="READ" )\n  CALL pressureMeshFile%Open()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  CALL velocityDomain%Initiate( velocityMeshFile, "")\n  CALL velocityMeshFile%Deallocate()\n  CALL pressureDomain%Initiate( pressureMeshFile, "")\n  CALL pressureMeshFile%Deallocate()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%InitiateNodeToNodeData( domain2=velocityDomain, &\n    & domain1=pressureDomain )\n  nodeToNode => obj%getNodeToNodePointer()\n  pressureNode => pressureDomain%getNodeCoordPointer()\n  velocityNode => velocityDomain%getNodeCoordPointer()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Simple testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'  DO ii = pressureDomain%minNptrs, pressureDomain%maxNptrs\n    IF( .NOT. pressureDomain%isNodePresent( globalNode=ii ) ) CYCLE\n    IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\n    IF( ALL( pressureNode(:,pressureDomain%getLocalNodeNumber(ii)) &\n      & .APPROXEQ. velocityNode(:, &\n      & velocityDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\n      !CALL Display( "pressure Node = " // TOSTRING(ii)  &\n      !  & // " matches with velocity Node = " // TOSTRING( nodeToNode(ii)))\n    ELSE\n      CALL Display( "ERROR: pressure Node = " // TOSTRING(ii)  &\n        & // " not matches with velocity Node = "  &\n        & // TOSTRING( nodeToNode(ii)))\n      STOP\n    END IF\n  END DO\n  CALL OK(.TRUE.)\n'})}),"\n",(0,o.jsx)(n.p,{children:"cleanup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"  CALL pressureDomain%Deallocate()\n  CALL velocityDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function C(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(v,{...e})}):v(e)}const R={},A="InitiateNodeToNodeData",P={id:"DomainConnectivity/InitiateNodeToNodes",title:"InitiateNodeToNodeData",description:"This routine initiates nodeToNode data (mapping) between two domains or parts of domains.",source:"@site/docs/docs-api/DomainConnectivity/InitiateNodeToNodes.md",sourceDirName:"DomainConnectivity",slug:"/DomainConnectivity/InitiateNodeToNodes",permalink:"/docs-api/DomainConnectivity/InitiateNodeToNodes",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/DomainConnectivity/InitiateNodeToNodes.md",tags:[],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"InitiateFacetToCellData",permalink:"/docs-api/DomainConnectivity/InitiateFacetToCellData"},next:{title:"MasterCellNumber",permalink:"/docs-api/DomainConnectivity/MasterCellNumber"}},f={},M=[{value:"Interface1",id:"interface1",level:3},{value:"Interface2",id:"interface2",level:2}];function O(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"initiatenodetonodedata",children:"InitiateNodeToNodeData"}),"\n",(0,o.jsx)(n.p,{children:"This routine initiates nodeToNode data (mapping) between two domains or parts of domains."}),"\n",(0,o.jsx)(n.h3,{id:"interface1",children:"Interface1"}),"\n",(0,o.jsx)(n.p,{children:"This subroutine generates the node to node connectivity between two meshes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"obj%nodeToNode"})," will be initiated"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"domain1"})," main domain"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"domain2"})," secondary domain"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dim1, entitynum1"})," dimension and entity number of mesh in ",(0,o.jsx)(n.code,{children:"domain1"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dim2, entitynum2"})," dimension and entity number of mesh in ",(0,o.jsx)(n.code,{children:"domain2"})]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"caution",children:(0,o.jsxs)(n.p,{children:["In this case bounds of ",(0,o.jsx)(n.code,{children:"nodeToNode"})," will be from 1 to ",(0,o.jsx)(n.code,{children:"mesh1%maxNptrs"}),"."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE dc_InitiateNodeToNodeData1(obj, domain1, domain2, &\n    & dim1, dim2, entityNum1, entityNum2)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Domain connectivity object,\n    !! [[DomainConnectivity:nodeToNode]] will be initiated\n    CLASS(Domain_), INTENT(IN) :: domain1\n    !! Primary domain, in nodeToNode(i), i denotes the\n    !! global node number in domain1 domain.\n    CLASS(Domain_), INTENT(IN) :: domain2\n    !! secondary domain, => nodeToNode(i) denotes the\n    !! global node number in `domain2` domain.\n    INTEGER(I4B), INTENT(IN) :: dim1\n    !! dimension of mesh in domain1\n    INTEGER(I4B), INTENT(IN) :: dim2\n    !! dimension of mesh in domain2\n    INTEGER(I4B), INTENT(IN) :: entityNum1\n    !! entity num of mesh in domain1\n    INTEGER(I4B), INTENT(IN) :: entityNum2\n    !! entity num of mesh in domain2\n  END SUBROUTINE dc_InitiateNodeToNodeData1\nEND INTERFACE\n"})}),"\n","\n","\n",(0,o.jsxs)(t.Z,{children:[(0,o.jsx)(a.Z,{value:"1",label:"\ufe0f\u0700 Example 1",children:(0,o.jsx)(l,{})}),(0,o.jsx)(a.Z,{value:"2",label:"\ufe0f\u0700 Example 2",children:(0,o.jsx)(c,{})}),(0,o.jsx)(a.Z,{value:"3",label:"\ufe0f\u0700 Example 3",children:(0,o.jsx)(N,{})}),(0,o.jsx)(a.Z,{value:"4",label:"\ufe0f\u0700 Example 4",children:(0,o.jsx)(u,{})}),(0,o.jsx)(a.Z,{value:"5",label:"\ufe0f\u0700 Example 5",children:(0,o.jsx)(T,{})}),(0,o.jsx)(a.Z,{value:"close",label:"\u21a2",default:!0})]}),"\n",(0,o.jsxs)(t.Z,{children:[(0,o.jsx)(a.Z,{value:"6",label:"\ufe0f\u0700 Example 6",children:(0,o.jsx)(E,{})}),(0,o.jsx)(a.Z,{value:"7",label:"\ufe0f\u0700 Example 7",children:(0,o.jsx)(y,{})}),(0,o.jsx)(a.Z,{value:"8",label:"\ufe0f\u0700 Example 8",children:(0,o.jsx)(g,{})}),(0,o.jsx)(a.Z,{value:"close",label:"\u21a2",default:!0})]}),"\n",(0,o.jsx)(n.h2,{id:"interface2",children:"Interface2"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE dc_InitiateNodeToNodeData2(obj, domain1, domain2)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Domain connectivity object\n    CLASS(Domain_), INTENT(IN) :: domain1\n    !! Primary domain, in nodeToNode(i), i denotes the\n    !! global node number in domain1 domain.\n    CLASS(Domain_), INTENT(IN) :: domain2\n    !! Secondary domain => nodeToNode(i) denotes the\n    !! global node number in domain2 domain.\n  END SUBROUTINE dc_InitiateNodeToNodeData2\nEND INTERFACE\n!# Introduction\n!\n!  This subroutine generates the node to node connectivity between two domains\n!\n!@note\n!In this routine nodeToNode connectivity info of all meshes in domain1 to\n!all meshes in the domain2 will be generated!\n!@endnote\n!\n! - `obj%nodeToNode` will be initiated\n! - `domain1` main domain\n! - `domain2` secondary domain\n"})}),"\n",(0,o.jsxs)(t.Z,{children:[(0,o.jsx)(a.Z,{value:"1",label:"\ufe0f\u0700 Example 1",children:(0,o.jsx)(I,{})}),(0,o.jsx)(a.Z,{value:"2",label:"\ufe0f\u0700 Example 2",children:(0,o.jsx)(C,{})}),(0,o.jsx)(a.Z,{value:"close",label:"\u21a2",default:!0})]}),"\n",(0,o.jsx)(n.p,{children:"This is a powerful \ud83d\udd25 and useful method. You can learn about this routine at following links."})]})}function F(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(O,{...e})}):O(e)}},85162:(e,n,i)=>{i.d(n,{Z:()=>a});i(67294);var o=i(86010);const s={tabItem:"tabItem_Ymn6"};var t=i(85893);function a(e){let{children:n,hidden:i,className:a}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,o.Z)(s.tabItem,a),hidden:i,children:n})}},74866:(e,n,i)=>{i.d(n,{Z:()=>g});var o=i(67294),s=i(86010),t=i(12466),a=i(16550),r=i(20469),l=i(91980),d=i(67392),c=i(50012);function m(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function N(e){const{values:n,children:i}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:i,attributes:o,default:s}}=e;return{value:n,label:i,attributes:o,default:s}}))}(i);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function h(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:i}=e;const s=(0,a.k6)(),t=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,l._X)(t),(0,o.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(s.location.search);n.set(t,e),s.replace({...s.location,search:n.toString()})}),[t,s])]}function p(e){const{defaultValue:n,queryString:i=!1,groupId:s}=e,t=N(e),[a,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=i.find((e=>e.default))??i[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:t}))),[d,m]=u({queryString:i,groupId:s}),[p,T]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,t]=(0,c.Nk)(i);return[s,(0,o.useCallback)((e=>{i&&t.set(e)}),[i,t])]}({groupId:s}),D=(()=>{const e=d??p;return h({value:e,tabValues:t})?e:null})();(0,r.Z)((()=>{D&&l(D)}),[D]);return{selectedValue:a,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),T(e)}),[m,T,t]),tabValues:t}}var T=i(72389);const D={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var E=i(85893);function L(e){let{className:n,block:i,selectedValue:o,selectValue:a,tabValues:r}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,t.o5)(),c=e=>{const n=e.currentTarget,i=l.indexOf(n),s=r[i].value;s!==o&&(d(n),a(s))},m=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=l.indexOf(e.currentTarget)+1;n=l[i]??l[0];break}case"ArrowLeft":{const i=l.indexOf(e.currentTarget)-1;n=l[i]??l[l.length-1];break}}n?.focus()};return(0,E.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":i},n),children:r.map((e=>{let{value:n,label:i,attributes:t}=e;return(0,E.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>l.push(e),onKeyDown:m,onClick:c,...t,className:(0,s.Z)("tabs__item",D.tabItem,t?.className,{"tabs__item--active":o===n}),children:i??n},n)}))})}function y(e){let{lazy:n,children:i,selectedValue:s}=e;const t=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===s));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,E.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function j(e){const n=p(e);return(0,E.jsxs)("div",{className:(0,s.Z)("tabs-container",D.tabList),children:[(0,E.jsx)(L,{...e,...n}),(0,E.jsx)(y,{...e,...n})]})}function g(e){const n=(0,T.Z)();return(0,E.jsx)(j,{...e,children:m(e.children)},String(n))}},22534:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/images/mesh_tri3-f040e740b2563c42265e62d3b8a5d5cf.png"},63148:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/images/mesh_tri6-48a06b485c95049e2ae16c0c60c896c4.png"},11151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>a});var o=i(67294);const s={},t=o.createContext(s);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);