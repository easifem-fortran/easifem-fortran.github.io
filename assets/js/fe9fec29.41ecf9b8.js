"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[57740],{72020:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>n,metadata:()=>l,toc:()=>h});var d=r(85893),i=r(11151),s=r(52991);const n={sidebar_position:1,date:new Date("2022-12-04T00:00:00.000Z"),update:new Date("2022-12-04T00:00:00.000Z"),status:"stable",docs:"partial",extpkgs:["Sparsekit"],category:["LinearAlgebra","Matrix","SparseMatrix"],tags:["matrix","easifemBase","extpkgs","linearAlgebra","sparseMatrix"]},c="CSRMatrix",l={id:"CSRMatrix/index",title:"CSRMatrix",description:"CSRMatrix is defined to handle Compressed Sparse Row matrix.",source:"@site/docs/docs-api/CSRMatrix/index.md",sourceDirName:"CSRMatrix",slug:"/CSRMatrix/",permalink:"/docs-api/CSRMatrix/",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/CSRMatrix/index.md",tags:[{label:"matrix",permalink:"/docs-api/tags/matrix"},{label:"easifemBase",permalink:"/docs-api/tags/easifem-base"},{label:"extpkgs",permalink:"/docs-api/tags/extpkgs"},{label:"linearAlgebra",permalink:"/docs-api/tags/linear-algebra"},{label:"sparseMatrix",permalink:"/docs-api/tags/sparse-matrix"}],version:"current",lastUpdatedAt:1706190069,formattedLastUpdatedAt:"Jan 25, 2024",sidebarPosition:1,frontMatter:{sidebar_position:1,date:"2022-12-04T00:00:00.000Z",update:"2022-12-04T00:00:00.000Z",status:"stable",docs:"partial",extpkgs:["Sparsekit"],category:["LinearAlgebra","Matrix","SparseMatrix"],tags:["matrix","easifemBase","extpkgs","linearAlgebra","sparseMatrix"]},sidebar:"tutorialSidebar",previous:{title:"Structure",permalink:"/docs-api/CPUTime/CPUTime_"},next:{title:"Structure",permalink:"/docs-api/CSRMatrix/CSRMatrix_"}},o={},h=[{value:"Constructor methods",id:"constructor-methods",level:2},{value:"Unary Methods",id:"unary-methods",level:2},{value:"All methods",id:"all-methods",level:2}];function x(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.h1,{id:"csrmatrix",children:"CSRMatrix"}),"\n",(0,d.jsxs)(t.p,{children:[(0,d.jsx)(t.code,{children:"CSRMatrix"})," is defined to handle Compressed Sparse Row matrix."]}),"\n",(0,d.jsx)(t.p,{children:"Currently following modules are defined."}),"\n",(0,d.jsxs)(t.ul,{children:["\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_ConstructorMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_IOMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_SparsityMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_SetMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_AddMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_SetRowMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_SetColMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_SetBlockRowMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_SetBlockColMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_GetMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_GetRowMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_GetColMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_GetSubMatrixMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_GetBlockRowMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_GetBlockColMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_UnaryMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_ILUMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_LUSolveMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_MatVecMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_MatmulMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_ReorderingMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_DiagonalScalingMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_MatrixMarketIO"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_Superlu"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_SpectralMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_SchurMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_DBCMethods"})}),"\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.code,{children:"CSRMatrix_LinSolveMethods"})}),"\n"]}),"\n",(0,d.jsx)(t.h2,{id:"constructor-methods",children:"Constructor methods"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"subroutine"}),(0,d.jsx)(t.th,{children:"description"}),(0,d.jsx)(t.th,{children:"status"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Initiate"}),(0,d.jsx)(t.td,{children:"Initiate instance of CSRMatrix"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Shape"}),(0,d.jsx)(t.td,{children:"Returns shape of the matrix"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Size"}),(0,d.jsx)(t.td,{children:"Returns size of matrix"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"TotalDimension"}),(0,d.jsx)(t.td,{children:"Returns the total dimension"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"GetNNZ"}),(0,d.jsx)(t.td,{children:"Returns total number of non zeros"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Allocate"}),(0,d.jsx)(t.td,{children:"Allocate memory for sparse matrix"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Deallocate"}),(0,d.jsx)(t.td,{children:"Deallocate the data stored in CSRMatrix"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"CSRMatrixAPLSB"}),(0,d.jsx)(t.td,{children:"Add two csr matrix"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"CSRMatrixAPLSBSorted"}),(0,d.jsx)(t.td,{children:"Add two csr matrix"}),(0,d.jsx)(t.td,{children:"done"})]})]})]}),"\n",(0,d.jsx)(t.h2,{id:"unary-methods",children:"Unary Methods"}),"\n",(0,d.jsx)(t.p,{children:"Following subroutines are planned to include in this module"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"subroutine"}),(0,d.jsx)(t.th,{children:"description"}),(0,d.jsx)(t.th,{children:"status"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"Scal"})}),(0,d.jsx)(t.td,{children:"Scale the sparse matrix"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"Convert"})}),(0,d.jsx)(t.td,{children:"Convert CSR matrix to dense matrix and vice-versa"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"ColumnSORT"})}),(0,d.jsx)(t.td,{children:"sorts the elements in increasing order of columns"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"RemoveDuplicates"})}),(0,d.jsx)(t.td,{children:"clean up the CSR format matrix, remove duplicate entry, etc"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"Clean"})}),(0,d.jsx)(t.td,{children:"This routine performs tasks related to the cleaning of sparse matrix."}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"Copy"})}),(0,d.jsx)(t.td,{children:"copy of a matrix into another matrix (both stored csr)"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"Get"})}),(0,d.jsxs)(t.td,{children:["returns ",(0,d.jsx)(t.code,{children:"a(i,j)"})," for any ",(0,d.jsx)(t.code,{children:"(i,j)"})," from a CSR-stored matrix."]}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"DropEntry"})}),(0,d.jsx)(t.td,{children:"This routine removes any elements whose absolute value is small from an input matrix A and puts the resulting matrix in B."}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"GetTranspose"})}),(0,d.jsx)(t.td,{children:"in-place transposition routine"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"GetDiagonal"})}),(0,d.jsx)(t.td,{children:"extracts a specified diagonal from a matrix."}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"GetLowerTriangle"})}),(0,d.jsx)(t.td,{children:"extracts lower triangular part"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"GetUpperTriangle"})}),(0,d.jsx)(t.td,{children:"extracts upper triangular part"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"GetSym"})}),(0,d.jsx)(t.td,{children:"Get the symmetric matrix from CSR matrix"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"PermuteRow"})}),(0,d.jsx)(t.td,{children:"permutes the rows of a matrix (B = P A)"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"PermuteColumn"})}),(0,d.jsx)(t.td,{children:"permutes the columns of a matrix (B = A Q)"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"Permute"})}),(0,d.jsx)(t.td,{children:"permutes both the rows and columns of a matrix (B = P A Q )"}),(0,d.jsx)(t.td,{children:"done"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"DVPERM"})}),(0,d.jsx)(t.td,{children:"permutes a real vector (in-place)"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"IVPERM"})}),(0,d.jsx)(t.td,{children:"permutes an integer vector (in-place)"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"FILTER"})}),(0,d.jsx)(t.td,{children:"filters elements from a matrix according to their magnitude"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"LEVELS"})}),(0,d.jsx)(t.td,{children:"gets the level scheduling structure for lower triangular matrices"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"AMASK"})}),(0,d.jsx)(t.td,{children:"extracts C = A mask M"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"RETMX"})}),(0,d.jsx)(t.td,{children:"returns the max absolute value in each row of the matrix"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"DIAPOS"})}),(0,d.jsx)(t.td,{children:"returns the positions of the diagonal elements in A."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"EXTBDG"})}),(0,d.jsx)(t.td,{children:"extracts the main diagonal blocks of a matrix."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"GETBWD"})}),(0,d.jsx)(t.td,{children:"returns the bandwidth information on a matrix."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"BLKFND"})}),(0,d.jsx)(t.td,{children:"finds the block-size of a matrix."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"BLKCHK"})}),(0,d.jsx)(t.td,{children:"checks whether a given integer is the block size of A."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"INFDIA"})}),(0,d.jsx)(t.td,{children:"obtains information on the diagonals of A."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"AMUBDG"})}),(0,d.jsx)(t.td,{children:"gets number of nonzeros in each row of A*B (as well as NNZ)"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"APLBDG"})}),(0,d.jsx)(t.td,{children:"gets number of nonzeros in each row of A+B (as well as NNZ)"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"RNRMS"})}),(0,d.jsx)(t.td,{children:"computes the norms of the rows of A"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"CNRMS"})}),(0,d.jsx)(t.td,{children:"computes the norms of the columns of A"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"ROSCAL"})}),(0,d.jsx)(t.td,{children:"scales the rows of a matrix by their norms."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"COSCAL"})}),(0,d.jsx)(t.td,{children:"scales the columns of a matrix by their norms."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"ADDBLK"})}),(0,d.jsx)(t.td,{children:"Adds a matrix B into a block of A."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"GET1UP"})}),(0,d.jsx)(t.td,{children:"Collects the first elements of each row of the upper triangular portion of the matrix"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"XTROWS"})}),(0,d.jsx)(t.td,{children:"extracts given rows from a matrix in CSR format."}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"CSRKVSTR"})}),(0,d.jsx)(t.td,{children:"Finds block row partitioning of matrix in CSR format"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"CSRKVSTC"})}),(0,d.jsx)(t.td,{children:"Finds block column partitioning of matrix in CSR format"}),(0,d.jsx)(t.td,{children:"todo"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"KVSTMERGE"})}),(0,d.jsx)(t.td,{children:"Merges block partitionings, for conformal row/col pattern"}),(0,d.jsx)(t.td,{children:"todo"})]})]})]}),"\n",(0,d.jsx)(t.h2,{id:"all-methods",children:"All methods"}),"\n","\n","\n",(0,d.jsx)(s.Z,{})]})}function a(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(x,{...e})}):x(e)}},52991:(e,t,r)=>{r.d(t,{Z:()=>f});r(67294);var d=r(86010),i=r(53438),s=r(39960),n=r(13919),c=r(95999),l=r(92503);const o={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var h=r(85893);function x(e){let{href:t,children:r}=e;return(0,h.jsx)(s.Z,{href:t,className:(0,d.Z)("card padding--lg",o.cardContainer),children:r})}function a(e){let{href:t,icon:r,title:i,description:s}=e;return(0,h.jsxs)(x,{href:t,children:[(0,h.jsxs)(l.Z,{as:"h2",className:(0,d.Z)("text--truncate",o.cardTitle),title:i,children:[r," ",i]}),s&&(0,h.jsx)("p",{className:(0,d.Z)("text--truncate",o.cardDescription),title:s,children:s})]})}function j(e){let{item:t}=e;const r=(0,i.LM)(t);return r?(0,h.jsx)(a,{href:r,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,c.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function m(e){let{item:t}=e;const r=(0,n.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",d=(0,i.xz)(t.docId??void 0);return(0,h.jsx)(a,{href:t.href,icon:r,title:t.label,description:t.description??d?.description})}function u(e){let{item:t}=e;switch(t.type){case"link":return(0,h.jsx)(m,{item:t});case"category":return(0,h.jsx)(j,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function p(e){let{className:t}=e;const r=(0,i.jA)();return(0,h.jsx)(f,{items:r.items,className:t})}function f(e){const{items:t,className:r}=e;if(!t)return(0,h.jsx)(p,{...e});const s=(0,i.MN)(t);return(0,h.jsx)("section",{className:(0,d.Z)("row",r),children:s.map(((e,t)=>(0,h.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,h.jsx)(u,{item:e})},t)))})}},11151:(e,t,r)=>{r.d(t,{Z:()=>c,a:()=>n});var d=r(67294);const i={},s=d.createContext(i);function n(e){const t=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),d.createElement(s.Provider,{value:t},e.children)}}}]);