"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[14151],{98095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=n(85893),s=n(11151);const i={},o="SetSparsity",a={id:"CSRSparsity/SetSparsity",title:"SetSparsity",description:"This subroutine sets the sparsity pattern in the CSRSparsity object.",source:"@site/docs/docs-api/CSRSparsity/SetSparsity.md",sourceDirName:"CSRSparsity",slug:"/CSRSparsity/SetSparsity",permalink:"/docs-api/CSRSparsity/SetSparsity",draft:!1,unlisted:!1,editUrl:"https://github.com/vickysharma0812/vickysharma0812.github.io/tree/main/docs/docs-api/CSRSparsity/SetSparsity.md",tags:[],version:"current",lastUpdatedAt:1701101849,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Initiate",permalink:"/docs-api/CSRSparsity/Initiate"},next:{title:"Shape",permalink:"/docs-api/CSRSparsity/Shape"}},c={},d=[];function p(e){const t={admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"setsparsity",children:"SetSparsity"}),"\n",(0,r.jsx)(t.p,{children:"This subroutine sets the sparsity pattern in the CSRSparsity object."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fortran",children:"MODULE SUBROUTINE SetSparsity( obj, Row, Col )\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: Row\n  INTEGER( I4B ), INTENT( IN ) :: Col( : )\nEND SUBROUTINE SetSparsity\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fortran",children:"MODULE SUBROUTINE SetSparsity( obj, Row, Col )\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: Row( : )\n    !! row number\n  TYPE( IntVector_ ), INTENT( IN ) :: Col( : )\n    !! column number\nEND SUBROUTINE SetSparsity\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This subroutine sets the sparsity pattern of a given row. If ",(0,r.jsx)(t.code,{children:"obj%tdof"})," is equal to 1, then ",(0,r.jsx)(t.code,{children:"Col"})," is sorted in increasing order and appended to ",(0,r.jsx)(t.code,{children:"obj%Row(Row)"}),". If ",(0,r.jsx)(t.code,{children:"obj%tdof"})," is not equal to 1, then based on the storage format and ",(0,r.jsx)(t.code,{children:"Col"}),", connectivity information is generated. For more information see [[CSRSparsity_test_5]]."]}),"\n",(0,r.jsx)(t.p,{children:"The second interface is simialar to the first one, however, in the second several rows can be given."}),"\n",(0,r.jsx)(t.p,{children:"To handle the block sparsity we can use following routines. You can find an example in [[CSRSparsity_test_3]]."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fortran",children:"MODULE SUBROUTINE SetSparsity( obj, row, col, ivar, jvar )\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: row\n    !! row number\n  INTEGER( I4B ), INTENT( IN ) :: col( : )\n    !! sparsity of row, column numbers\n  INTEGER( I4B ), INTENT( IN ) :: ivar\n    !! block address (row index)\n  INTEGER( I4B ), INTENT( IN ) :: jvar\n    !! block address (col index)\nEND SUBROUTINE SetSparsity\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fortran",children:"MODULE SUBROUTINE SetSparsity( obj, Row, Col, iVar, jVar )\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: Row( : )\n    !! several row numbers\n  TYPE( IntVector_ ), INTENT( IN ) :: Col( : )\n    !! column index for each row number\n  INTEGER( I4B ), INTENT( IN ) :: iVar\n    !! block address (row index)\n  INTEGER( I4B ), INTENT( IN ) :: jVar\n    !! block address (col index)\nEND SUBROUTINE SetSparsity\n"})}),"\n",(0,r.jsx)(t.admonition,{title:"SetSparsity",type:"note",children:(0,r.jsxs)(t.p,{children:["While calling ",(0,r.jsx)(t.code,{children:"SetSparsity()"})," user has to deal with the node numbers only, because this routine reads the information stored inside the [[DOF_]] object field, and take care of sparsity patterns for all degrees of freedom."]})}),"\n",(0,r.jsx)(t.admonition,{title:"SetSparsity",type:"info",children:(0,r.jsxs)(t.p,{children:["When you are done setting the sparsity pattern, you must call ",(0,r.jsx)(t.code,{children:"SetSparsity()"})," without arguments. This subroutine then creates a compact data inside the instance of [[CSRSparsity_]]."]})})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var r=n(67294);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);