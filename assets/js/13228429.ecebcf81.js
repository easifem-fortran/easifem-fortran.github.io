"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[61804],{96421:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>F,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(85893),i=n(11151);const a={},o="Structure",s={id:"FortranFile/FortranFile_",title:"Structure",description:"FortranFile is an extension of AbstractFile. It provides a simplified interface to the native Fortran file capabilities and includes error checking.",source:"@site/docs/docs-api/FortranFile/FortranFile_.md",sourceDirName:"FortranFile",slug:"/FortranFile/FortranFile_",permalink:"/docs-api/FortranFile/FortranFile_",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/FortranFile/FortranFile_.md",tags:[],version:"current",lastUpdatedAt:1706190055,formattedLastUpdatedAt:"Jan 25, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Delete",permalink:"/docs-api/FortranFile/Delete"},next:{title:"GetRecLen",permalink:"/docs-api/FortranFile/GetRecLen"}},c={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"structure",children:"Structure"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"FortranFile_"})," is an extension of ",(0,r.jsx)(t.code,{children:"AbstractFile_"}),". It provides a simplified interface to the native Fortran file capabilities and includes error checking."]}),"\n",(0,r.jsxs)(t.p,{children:["Note that ",(0,r.jsx)(t.code,{children:"FortranFile_"})," does not provide any method to write and read data from the file."]}),"\n",(0,r.jsxs)(t.p,{children:["This is because the data may be written in ASCII or Binary format. For this reason ",(0,r.jsx)(t.code,{children:"FortranFile_"})," is extended to following file formats."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/docs-api/TxtFile",children:"TxtFile_"})}),"\n",(0,r.jsx)(t.li,{children:"DA32File (TODO)"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fortran",children:"TYPE, EXTENDS(AbstractFile_) :: FortranFile_\n  PRIVATE\n  LOGICAL(LGT) :: initstat = .FALSE.\n    !! file initiated or not\n  INTEGER(I4B) :: unitno = -1\n    !! unit number\n  INTEGER(I4B) :: reclval = -1\n    !! record length for direct access\n  LOGICAL(LGT) :: formatstat = .FALSE.\n    !! file is formatted or not\n  LOGICAL(LGT) :: accessstat = .FALSE.\n    !! direct or sequential access\n  LOGICAL(LGT) :: newstat = .FALSE.\n    !! the new status of a file\n  LOGICAL(LGT) :: overwrite = .FALSE.\n    !! replace or not\n  LOGICAL(LGT) :: padstat = .FALSE.\n    !! Whether or not the file is being padded\n  LOGICAL(LGT) :: getNewUnit = .FALSE.\n  CHARACTER(LEN=6) :: posopt = 'ASIS  '\n  CHARACTER(LEN=1) :: comment = hash\n  CHARACTER(LEN=1) :: separator = comma\n  CHARACTER(LEN=2) :: delimiter = \"\\n\"\n"})})]})}function F(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>o});var r=n(67294);const i={},a=r.createContext(i);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);