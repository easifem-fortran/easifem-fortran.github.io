"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[47015],{62568:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>b,contentTitle:()=>R,default:()=>_,frontMatter:()=>x,metadata:()=>g,toc:()=>F});var l=a(85893),t=a(11151),s=a(74866),o=a(85162);function i(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:"{42-52}",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ), ALLOCATABLE :: value(:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=value, globalNode=3)\n  call display(svalue(:,:,3), "set value(:,:,3) = ")\n  call display(value, "get value = ")\n\n  call obj%get(value=value, spaceCompo=1, timeCompo=1)\n  call display(svalue(1,1,:), "set value(1,1,:) = ")\n  call display(value, "get value = ")\n\n  call obj%get(value=value, spaceCompo=2)\n  call display(svalue(2,:,1:3), "set value(2,:,:) = ")\n  call display(value, "get value = ")\n\n\n  call obj%get(value=value, timeCompo=2)\n  call display(svalue(:,2,1:3), "set value(:,2,1:3) = ")\n  call display(value, "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(:,:,3) = \n-------------------\n0.147476  0.747876 \n0.171333  0.127092 \n\nget value(:,:,3) = \n-------------------\n     0.147476      \n     0.171333      \n     0.747876      \n     0.127092      \n\nset value(1,1,:) = \n-------------------\n     0.241280      \n     0.812112      \n     0.498660      \n\nget value = \n------------\n  0.241280  \n  0.812112  \n  0.498660  \n\n     set value(2,:,1:3) =     \n----------------------------\n0.900714  0.183391  0.119554\n0.649540  0.061109  0.117385\n\nget value = \n------------\n  0.900714  \n  0.649540  \n  0.183391  \n  0.061109  \n  0.119554  \n  0.117385  \n.\n.\n.\n\n\n    set value(:,2,1:3) =    \n----------------------------\n0.965499  0.382799  0.656891\n0.646576  0.781357  0.206606\nget value = \n------------\n  0.965499  \n  0.646576  \n  0.382799  \n  0.781357  \n  0.656891  \n  0.206606  \n.\n.\n.\n"})})]})}function r(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(i,{...e})}):i(e)}function c(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ), ALLOCATABLE :: value(:, :, :)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=value)\n  call display(svalue(:,:,3), "set value(:,:,3) = ")\n  call display(value(:,:,3), "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(:,:,3) = \n-------------------\n0.131827  0.736131 \n0.861203  0.200003 \n\n   get value =    \n------------------\n0.131827  0.736131\n0.861203  0.200003\n"})})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}function m(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ), ALLOCATABLE :: value(:, :, :)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=value, globalNode=arange(1,3,1))\n  call display(svalue(:,:,1:3), "set value(:,:,1:3) = ")\n  call display(value(:,:,1:3), "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(:,:,1:3) =( :, :, 1 ) = \n----------------------------------\n        0.756550  0.362901        \n        0.014583  0.965337        \nset value(:,:,1:3) =( :, :, 2 ) = \n----------------------------------\n        0.640156  0.578452        \n        0.030592  0.802883        \nset value(:,:,1:3) =( :, :, 3 ) = \n----------------------------------\n        0.661545  0.874983        \n        0.684608  0.628923        \nget value =( :, :, 1 ) = \n-------------------------\n   0.756550  0.362901    \n   0.014583  0.965337    \nget value =( :, :, 2 ) = \n-------------------------\n   0.640156  0.578452    \n   0.030592  0.802883    \nget value =( :, :, 3 ) = \n-------------------------\n   0.661545  0.874983    \n   0.684608  0.628923    \n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(m,{...e})}):m(e)}function u(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ), ALLOCATABLE :: value(:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=value, globalNode=arange(1,3,1), spaceCompo=1, &\n  & timeCompo=1)\n  call display(svalue(1,1,1:3), "set value(1,1,1:3) = ")\n  call display(value, "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(1,1,1:3) = \n---------------------\n      0.360376       \n      0.515725       \n      0.139868       \n\nget value = \n------------\n  0.360376  \n  0.515725  \n  0.139868  \n"})})]})}function E(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}function L(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ) :: value\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=value, globalNode=3, spaceCompo=1, &\n  & timeCompo=1)\n  call display(svalue(1,1,3), "set value(1,1,1:3) = ")\n  call display(value, "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(1,1,1:3) = 0.959122\nget value = 0.959122\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(L,{...e})}):L(e)}function T(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ), ALLOCATABLE :: value(:, :, :)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=value, istart=1, iend=3, stride=1)\n  call display(svalue(:,:,1:3), "set value(:,:,1:3) = ")\n  call display(value(:,:,1:3), "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(:,:,1:3) =( :, :, 1 ) = \n----------------------------------\n        0.180902  0.420299        \n        0.983944  0.386861        \nset value(:,:,1:3) =( :, :, 2 ) = \n----------------------------------\n        0.248634  0.276885        \n        0.320403  0.242269        \nset value(:,:,1:3) =( :, :, 3 ) = \n----------------------------------\n        0.026450  0.434365        \n        0.303477  0.002217        \nget value =( :, :, 1 ) = \n-------------------------\n   0.180902  0.420299    \n   0.983944  0.386861    \nget value =( :, :, 2 ) = \n-------------------------\n   0.248634  0.276885    \n   0.320403  0.242269    \nget value =( :, :, 3 ) = \n-------------------------\n   0.026450  0.434365    \n   0.303477  0.002217    \n"})})]})}function A(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(T,{...e})}):T(e)}function I(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ), ALLOCATABLE :: value(:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=value, istart=1, iend=3, stride=1, &\n  & spaceCompo=1, timeCompo=1)\n  call display(svalue(1,1,1:3), "set value(1,1,1:3) = ")\n  call display(value, "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(1,1,1:3) = \n---------------------\n      0.826815       \n      0.325986       \n      0.024318       \n\nget value = \n------------\n  0.826815  \n  0.325986  \n  0.024318  \n"})})]})}function N(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(I,{...e})}):I(e)}function C(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=value, globalNode=3_I4B)\n  call display(svalue(:,:,3), "set value(:,:,3) = ")\n  call display(value, "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(:,:,3) = \n-------------------\n0.129860  0.440831 \n0.624638  0.761094 \n   get value =    \n------------------\n0.129860  0.440831\n0.624638  0.761094\n\n"})})]})}function f(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(C,{...e})}):C(e)}function v(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test the ",(0,l.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Get",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n  type(FEVariable_) :: fevar\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\n  call random_number(svalue)\n  call obj%set(value=svalue)\n\n  call obj%get(value=fevar, globalNode=arange(1,3,1))\n  call display(svalue(:,:,1:3), "set value(:,:,3) = ")\n  call display(fevar, "get value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"set value(:,:,3) =( :, :, 1 ) = \n--------------------------------\n       0.189357  0.579115       \n       0.412881  0.543243       \nset value(:,:,3) =( :, :, 2 ) = \n--------------------------------\n       0.860663  0.715234       \n       0.946888  0.539013       \nset value(:,:,3) =( :, :, 3 ) = \n--------------------------------\n       0.240968  0.771520       \n       0.793377  0.683370       \nget value = \nRANK :: 1 (VECTOR)\n# VarType: SPACE & TIME\n   # VALUE:( :, :, 1 ) =    \n----------------------------\n0.189357  0.860663  0.240968\n0.412881  0.946888  0.793377\n   # VALUE:( :, :, 2 ) =    \n----------------------------\n0.579115  0.715234  0.771520\n0.543243  0.539013  0.683370\n"})})]})}function j(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(v,{...e})}):v(e)}const x={},R="Get",g={id:"STVectorFieldLis/Get",title:"Get",description:"Get entries from vector field.",source:"@site/docs/docs-api/STVectorFieldLis/Get.md",sourceDirName:"STVectorFieldLis",slug:"/STVectorFieldLis/Get",permalink:"/docs-api/STVectorFieldLis/Get",draft:!1,unlisted:!1,editUrl:"https://github.com/vickysharma0812/vickysharma0812.github.io/tree/main/docs/docs-api/STVectorFieldLis/Get.md",tags:[],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Export",permalink:"/docs-api/STVectorFieldLis/Export"},next:{title:"GetPointer",permalink:"/docs-api/STVectorFieldLis/GetPointer"}},b={},F=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2}];function P(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"get",children:"Get"}),"\n",(0,l.jsx)(n.p,{children:"Get entries from vector field."}),"\n",(0,l.jsx)(n.p,{children:"Calling example:"}),"\n","\n","\n",(0,l.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get1(obj, VALUE, globalNode, spaceCompo, &\n    & timeCompo)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: globalNode\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: spaceCompo\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: timeCompo\n  END SUBROUTINE stvField_get1\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"globalnode"})," is present then this routine returns the space-time values at the ",(0,l.jsx)(n.code,{children:"globalnode"}),". Note that the returned values are stored in ",(0,l.jsx)(n.code,{children:"value"})," in ",(0,l.jsx)(n.code,{children:"NODES_FMT"})," format. You can get the space-time nodal values by reshaping ",(0,l.jsx)(n.code,{children:"value"}),", that is, ",(0,l.jsx)(n.code,{children:"reshape(value, [spaceCompo, timeCompo])"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"spaceCompo"})," and ",(0,l.jsx)(n.code,{children:"timeCompo"})," are present, then this routine returns all the nodal values of specified space-time component. The size of  ",(0,l.jsx)(n.code,{children:"value"})," will be ",(0,l.jsx)(n.code,{children:"tNodes"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"spaceCompo"})," is present and ",(0,l.jsx)(n.code,{children:"timeCompo"})," is not present, then this routine returns nodal values of all time components in ",(0,l.jsx)(n.code,{children:"value"}),". The data is stored in ",(0,l.jsx)(n.code,{children:"NODES_FMT"}),". Therefore, by reshaping ",(0,l.jsx)(n.code,{children:"value"})," as ",(0,l.jsx)(n.code,{children:"reshape(value, [timeCompo, tNodes])"})," you can retrive data."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"timeCompo"})," is present and ",(0,l.jsx)(n.code,{children:"spaceCompo"})," is not present, then this routine returns  nodal values of all space components in ",(0,l.jsx)(n.code,{children:"value"}),". The data is stored in ",(0,l.jsx)(n.code,{children:"NODES_FMT"}),". Therefore, by reshaping ",(0,l.jsx)(n.code,{children:"value"})," as ",(0,l.jsx)(n.code,{children:"reshape(value, [spaceCompo, tNodes])"})," you can retrive data."]}),"\n"]}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(r,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get2(obj, VALUE)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :, :)\n  END SUBROUTINE stvField_get2\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This routine returns all nodal values of all space-time components."}),"\n",(0,l.jsxs)(n.li,{children:["The shape of ",(0,l.jsx)(n.code,{children:"value"})," is (",(0,l.jsx)(n.code,{children:"spaceCompo, timeCompo, tNodes"}),")."]}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(d,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get3(obj, VALUE, globalNode)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :, :)\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n  END SUBROUTINE stvField_get3\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This routine returns space-time nodal values of global nodes"}),"\n",(0,l.jsxs)(n.li,{children:["The shape of ",(0,l.jsx)(n.code,{children:"value"})," is (",(0,l.jsx)(n.code,{children:"spaceCompo, timeCompo, size(globalNode)"}),")"]}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(p,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get4(obj, VALUE, globalNode, spaceCompo, &\n    & timeCompo)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n  END SUBROUTINE stvField_get4\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This method returns the nodal value of a given space-time component."}),"\n",(0,l.jsxs)(n.li,{children:["The size of ",(0,l.jsx)(n.code,{children:"value"})," is same as the size of ",(0,l.jsx)(n.code,{children:"globalNode"}),"."]}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(E,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get5(obj, VALUE, globalNode, spaceCompo, &\n    & timeCompo)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    REAL(DFP), INTENT(INOUT) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: globalNode\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n  END SUBROUTINE stvField_get5\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This method returns a single entry of a space-time component at a given node."}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(h,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get6(obj, VALUE, istart, iend, stride)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :, :)\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n  END SUBROUTINE stvField_get6\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This routine returns space-time nodal values at multiple nodes."}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(A,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get7(obj, VALUE, istart, iend, stride, &\n    & spaceCompo, timeCompo)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n  END SUBROUTINE stvField_get7\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This routine returns the nodal values of specified space-time component"}),"\n",(0,l.jsx)(n.li,{children:"Node numbers are specified by triplets"}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(N,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get8(obj, VALUE, globalNode)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :)\n    INTEGER(I4B), INTENT(IN) :: globalNode\n  END SUBROUTINE stvField_get8\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This method returns the space-time nodal value at a given node."}),"\n",(0,l.jsxs)(n.li,{children:["The shape of ",(0,l.jsx)(n.code,{children:"value"})," is (",(0,l.jsx)(n.code,{children:"spaceCompo"}),", ",(0,l.jsx)(n.code,{children:"timeCompo"}),")."]}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(f,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,l.jsxs)(s.Z,{children:[(0,l.jsxs)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get9(obj, VALUE, globalNode)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    TYPE(FEVariable_), INTENT(INOUT) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n  END SUBROUTINE stvField_get9\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This routine returns space-time nodal value of specified nodes in FEVariable."}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"value"})," is FEVariable of SpaceTime type."]}),"\n"]})]}),(0,l.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(j,{})}),(0,l.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE stvField_get10(obj, VALUE, spaceCompo, timeCompo)\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\n    CLASS(AbstractNodeField_), INTENT(INOUT) :: VALUE\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: spaceCompo\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: timeCompo\n  END SUBROUTINE stvField_get10\nEND INTERFACE\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This method returns the space component as an instance of AbstractNodeField."}),"\n"]})]})}function _(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(P,{...e})}):P(e)}},85162:(e,n,a)=>{a.d(n,{Z:()=>o});a(67294);var l=a(86010);const t={tabItem:"tabItem_Ymn6"};var s=a(85893);function o(e){let{children:n,hidden:a,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,l.Z)(t.tabItem,o),hidden:a,children:n})}},74866:(e,n,a)=>{a.d(n,{Z:()=>f});var l=a(67294),t=a(86010),s=a(12466),o=a(16550),i=a(20469),r=a(91980),c=a(67392),d=a(50012);function m(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:a}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:a,attributes:l,default:t}}=e;return{value:n,label:a,attributes:l,default:t}}))}(a);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function u(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function E(e){let{queryString:n=!1,groupId:a}=e;const t=(0,o.k6)(),s=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,r._X)(s),(0,l.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function L(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,s=p(e),[o,r]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const l=a.find((e=>e.default))??a[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:s}))),[c,m]=E({queryString:a,groupId:t}),[L,h]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,s]=(0,d.Nk)(a);return[t,(0,l.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:t}),T=(()=>{const e=c??L;return u({value:e,tabValues:s})?e:null})();(0,i.Z)((()=>{T&&r(T)}),[T]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);r(e),m(e),h(e)}),[m,h,s]),tabValues:s}}var h=a(72389);const T={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var A=a(85893);function I(e){let{className:n,block:a,selectedValue:l,selectValue:o,tabValues:i}=e;const r=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const n=e.currentTarget,a=r.indexOf(n),t=i[a].value;t!==l&&(c(n),o(t))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=r.indexOf(e.currentTarget)+1;n=r[a]??r[0];break}case"ArrowLeft":{const a=r.indexOf(e.currentTarget)-1;n=r[a]??r[r.length-1];break}}n?.focus()};return(0,A.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.Z)("tabs",{"tabs--block":a},n),children:i.map((e=>{let{value:n,label:a,attributes:s}=e;return(0,A.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>r.push(e),onKeyDown:m,onClick:d,...s,className:(0,t.Z)("tabs__item",T.tabItem,s?.className,{"tabs__item--active":l===n}),children:a??n},n)}))})}function N(e){let{lazy:n,children:a,selectedValue:t}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===t));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,A.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function C(e){const n=L(e);return(0,A.jsxs)("div",{className:(0,t.Z)("tabs-container",T.tabList),children:[(0,A.jsx)(I,{...e,...n}),(0,A.jsx)(N,{...e,...n})]})}function f(e){const n=(0,h.Z)();return(0,A.jsx)(C,{...e,children:m(e.children)},String(n))}},11151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>o});var l=a(67294);const t={},s=l.createContext(t);function o(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);