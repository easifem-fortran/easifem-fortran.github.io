"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[23106,5611],{96579:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>r,toc:()=>h});var i=a(85893),s=a(11151);const t={id:"Initiate",aliases:["Initiate"],tags:[],sidebar_position:3},l="Initiate",r={id:"AbstractMeshField/Initiate",title:"Initiate",description:"Initiate an instance of AbstractMeshField_.",source:"@site/docs/docs-api/AbstractMeshField/Initiate.md",sourceDirName:"AbstractMeshField",slug:"/AbstractMeshField/Initiate",permalink:"/docs-api/AbstractMeshField/Initiate",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/AbstractMeshField/Initiate.md",tags:[],version:"current",lastUpdatedAt:1702011327,formattedLastUpdatedAt:"Dec 8, 2023",sidebarPosition:3,frontMatter:{id:"Initiate",aliases:["Initiate"],tags:[],sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"SetAbstractMeshFieldParam",permalink:"/docs-api/AbstractMeshField/SetAbstractMeshFieldParam"},next:{title:"Set",permalink:"/docs-api/AbstractMeshField/Set"}},c={},h=[{value:"Interface 1 (Initiate by using param)",id:"interface-1-initiate-by-using-param",level:2},{value:"Interface 2 (Initiate by copying)",id:"interface-2-initiate-by-copying",level:2},{value:"Interface 3 (Initiate by AbstractMaterial)",id:"interface-3-initiate-by-abstractmaterial",level:2},{value:"Interface 4 (Initiate by UserFunction)",id:"interface-4-initiate-by-userfunction",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"initiate",children:"Initiate"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate an instance of ",(0,i.jsx)(n.code,{children:"AbstractMeshField_"}),"."]}),"\n",(0,i.jsx)("span",{class:"badge badge--secondary",children:" @ConstructorMethods "}),"\n",(0,i.jsx)(n.h2,{id:"interface-1-initiate-by-using-param",children:"Interface 1 (Initiate by using param)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE AbstractMeshFieldInitiate\n  MODULE SUBROUTINE Initiate1(obj, param, mesh)\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj\n    TYPE(ParameterList_), INTENT(IN) :: param\n    TYPE(Mesh_), TARGET, INTENT(IN) :: mesh\n  END SUBROUTINE Initiate1\nEND INTERFACE AbstractMeshFieldInitiate\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface-2-initiate-by-copying",children:"Interface 2 (Initiate by copying)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate2(obj, obj2, copyFull, copyStructure, &\n    & usePointer)\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj2\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: copyFull\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: copyStructure\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: usePointer\n  END SUBROUTINE Initiate2\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface-3-initiate-by-abstractmaterial",children:"Interface 3 (Initiate by AbstractMaterial)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate3(obj, mesh, material, name, engine)\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj\n    !! AbstractMeshField\n    TYPE(Mesh_), TARGET, INTENT(IN) :: mesh\n    !! mesh\n    CLASS(AbstractMaterial_), INTENT(INOUT) :: material\n    !! Abstract material\n    CHARACTER(*), INTENT(IN) :: name\n    !! name of the AbstractMeshField\n    CHARACTER(*), INTENT(IN) :: engine\n    !! engine of the AbstractMeshField\n  END SUBROUTINE Initiate3\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface-4-initiate-by-userfunction",children:"Interface 4 (Initiate by UserFunction)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate4(obj, mesh, func, name, engine, nnt)\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj\n    !! AbstractMeshField\n    TYPE(Mesh_), TARGET, INTENT(IN) :: mesh\n    !! mesh\n    CLASS(UserFunction_), INTENT(INOUT) :: func\n    !! Abstract material\n    CHARACTER(*), INTENT(IN) :: name\n    !! name of the AbstractMeshField\n    CHARACTER(*), INTENT(IN) :: engine\n    !! engine of the AbstractMeshField\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: nnt\n    !! number of nodes in time\n  END SUBROUTINE Initiate4\nEND INTERFACE\n"})})]})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},59831:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>T,contentTitle:()=>j,default:()=>u,frontMatter:()=>x,metadata:()=>f,toc:()=>I});var i=a(85893),s=a(11151),t=a(96579);function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"example-1",children:"Example 1"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This example shows how to initiate an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/Mesh",children:"Mesh"})," by reading data from mesh file, which is in ",(0,i.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format. We will also construct an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/STVectorMeshField",children:"STVectorMeshField_"}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( Mesh_ ) :: amesh\n  TYPE( STVectorMeshField_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-1",children:"Step 1:"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate and open the mesh file which is in ",(0,i.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'CALL meshfile%Initiate( FileName="./mesh.h5", MODE="READ" )\nCALL meshfile%Open()\nCALL amesh%Initiate(hdf5=meshfile, group="/surfaceEntities_1" )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2",children:"Step 2:"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/STVectorMeshField",children:"STVectorMeshField_"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL FPL_INIT(); CALL param%initiate()\nCALL SetSTVectorMeshFieldParam( &\n  & param=param, &\n  & name='aVector', &\n  & varType = Constant, &\n  & fieldType=TypeField%normal, &\n  & engine='NATIVE_SERIAL', &\n  & defineOn=Nodal, &\n  & nns=6,  &\n  & nnt=2 ,  &\n  & spaceCompo = amesh%GetNSD())\nCALL obj%Initiate( param=param, mesh=amesh)\nCALL obj%Display( 'obj: ' )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The above code will initiate an instance of ",(0,i.jsx)(n.code,{children:"STVectorMeshField_"}),", which will contain following data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"Object INITIATED: TRUE\nname: aVector\nprefix: STVectorMeshField\nfieldType: NORMAL              \nengine: NATIVE_SERIAL\ntSize: 484\ndefineOn: Nodal\nrank: Vector\nvarType: Constant\nshape: \n-------\n   2   \nval ALLOCATED: TRUE\nmesh ASSOCIATED: TRUE\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's try to understand the above situation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In above call (internally) we have saved data in a two-dimensional array ",(0,i.jsx)(n.code,{children:"val"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The number of rows in ",(0,i.jsx)(n.code,{children:"val"})," for above example is ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Because, we have set ",(0,i.jsx)(n.code,{children:"varType=Constant"}),", all nodes (we have specified 6 nodes in space and 2 nodes in time) in an element have same value of vector field. Read more about the ",(0,i.jsx)(n.a,{href:"/docs-api/AbstractMeshField/AbstractMeshField_",children:"Shape"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:["The number of columns in ",(0,i.jsx)(n.code,{children:"val"})," is ",(0,i.jsx)(n.code,{children:"484"}),", which is same as the total number of elements in the mesh. This is because we have used ",(0,i.jsx)(n.code,{children:"fieldType=normal"})," in the above example."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-3",children:"Step 3:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL amesh%Deallocate()\n  CALL meshfile%Close()\n  CALL meshfile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function r(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}function c(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This example shows how to initiate an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/Mesh",children:"Mesh"})," by reading data from mesh file, which is in ",(0,i.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format. We will also construct an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/STVectorMeshField",children:"STVectorMeshField_"}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( Mesh_ ) :: amesh\n  TYPE( STVectorMeshField_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-1",children:"Step 1:"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate and open the mesh file which is in ",(0,i.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'CALL meshfile%Initiate( FileName="./mesh.h5", MODE="READ" )\nCALL meshfile%Open()\nCALL amesh%Initiate(hdf5=meshfile, group="/surfaceEntities_1" )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2",children:"Step 2:"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/STVectorMeshField",children:"STVectorMeshField_"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL FPL_INIT(); CALL param%initiate()\nCALL SetSTVectorMeshFieldParam( &\n  & param=param, &\n  & name='aVector', &\n  & varType = Constant, &\n  & fieldType=TypeField%Constant, &\n  & engine='NATIVE_SERIAL', &\n  & defineOn=Nodal, &\n  & nns=6,  &\n  & nnt=2,  &\n  & spaceCompo = amesh%GetNSD() )\nCALL obj%Initiate( param=param, mesh=amesh )\nCALL obj%Display( 'obj: ' )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The above code will initiate an instance of ",(0,i.jsx)(n.code,{children:"STVectorMeshField_"}),", which will the contain following data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"Object INITIATED: TRUE\nname: aVector\nprefix: STVectorMeshField\nfieldType: CONSTANT            \nengine: NATIVE_SERIAL\ntSize: 1\ndefineOn: Nodal\nrank: Vector\nvarType: Constant\nshape: \n-------\n   2   \nval ALLOCATED: TRUE\nmesh ASSOCIATED: TRUE\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's try to understand the above code:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We save data in a two dimensional array ",(0,i.jsx)(n.code,{children:"val"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The number of rows in ",(0,i.jsx)(n.code,{children:"val"})," for above example is 1. This is because the vector data is constant in space and time inside the element. Because, we have set ",(0,i.jsx)(n.code,{children:"varType=Constant"}),", all nodes (we have specified 6 nodes in space and 2 nodes in time) in an element has constant value. Read more about the ",(0,i.jsx)(n.a,{href:"/docs-api/AbstractMeshField/AbstractMeshField_",children:"Shape"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:["The number of columns in ",(0,i.jsx)(n.code,{children:"val"})," is ",(0,i.jsx)(n.code,{children:"1"}),", this is because the ",(0,i.jsx)(n.code,{children:"fieldType=Constant"})," (i.e., constant across all the elements)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-3",children:"Step 3:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL amesh%Deallocate()\n  CALL meshfile%Close()\n  CALL meshfile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This example shows how to initiate an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/Mesh",children:"Mesh"})," by reading data from mesh file, which is in ",(0,i.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format. We will also construct an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarMeshField",children:"STScalarMeshField_"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"The mesh is given below"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(82730).Z+"",width:"612",height:"797"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( Mesh_ ) :: amesh\n  TYPE( STScalarMeshField_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-1",children:"Step 1:"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate and open the mesh file which is in ",(0,i.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'CALL meshfile%Initiate( FileName="./mesh.h5", MODE="READ" )\nCALL meshfile%Open()\nCALL amesh%Initiate(hdf5=meshfile, group="/surfaceEntities_1" )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2",children:"Step 2:"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarMeshField",children:"STScalarMeshField_"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL FPL_INIT(); CALL param%initiate()\nCALL SetSTScalarMeshFieldParam( &\n  & param=param, &\n  & name='aScalar', &\n  & varType = Space, &\n  & fieldType=TypeField%Normal, &\n  & engine='NATIVE_SERIAL', &\n  & defineOn=Nodal, &\n  & nns=6, nnt=2 )\nCALL obj%Initiate( param=param, mesh=amesh )\nCALL obj%Display( 'obj: ' )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The above code will initiate an instance of ",(0,i.jsx)(n.code,{children:"STScalarMeshField_"}),", which will contain following data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"Object INITIATED: TRUE\nname: aScalar\nprefix: STScalarMeshField\nfieldType: NORMAL              \nengine: NATIVE_SERIAL\ntSize: 484\ndefineOn: Nodal\nrank: Scalar\nvarType: Space\nshape: \n-------\n   6   \nval ALLOCATED: TRUE\nmesh ASSOCIATED: TRUE\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's try to understand the above code:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We save data in a two dimensional array ",(0,i.jsx)(n.code,{children:"val"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The number of rows in ",(0,i.jsx)(n.code,{children:"val"})," for above example is ",(0,i.jsx)(n.code,{children:"6"}),". This is because we have set ",(0,i.jsx)(n.code,{children:"varType=Space"}),", which means the scalar data changes in ",(0,i.jsx)(n.code,{children:"Space"})," inside the element. Note that the data does not change in time in an element."]}),"\n",(0,i.jsxs)(n.li,{children:["Because, we have set ",(0,i.jsx)(n.code,{children:"varType=Space"}),", therefore ",(0,i.jsx)(n.code,{children:"val(1:6)"})," denotes the value of scalar field at 6 nodes of element. Read more about the ",(0,i.jsx)(n.a,{href:"/docs-api/AbstractMeshField/AbstractMeshField_",children:"Shape"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:["The number of columns in ",(0,i.jsx)(n.code,{children:"val"})," is ",(0,i.jsx)(n.code,{children:"484"})," (which is the total number of elements in the mesh), this is because the ",(0,i.jsx)(n.code,{children:"fieldType=Regular"})," (i.e., changes across all the elements)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-3",children:"Step 3:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL amesh%Deallocate()\n  CALL meshfile%Close()\n  CALL meshfile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function m(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This example shows how to initiate an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/Mesh",children:"Mesh"})," by reading data from mesh file, which is in ",(0,i.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format. We will also construct an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarMeshField",children:"STScalarMeshField_"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"The mesh is given below"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(82730).Z+"",width:"612",height:"797"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( Mesh_ ) :: amesh\n  TYPE( STScalarMeshField_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-1",children:"Step 1:"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate and open the mesh file which is in ",(0,i.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'CALL meshfile%Initiate( FileName="./mesh.h5", MODE="READ" )\nCALL meshfile%Open()\nCALL amesh%Initiate(hdf5=meshfile, group="/surfaceEntities_1" )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2",children:"Step 2:"}),"\n",(0,i.jsxs)(n.p,{children:["Initiate an instance of ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarMeshField",children:"STScalarMeshField_"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL FPL_INIT(); CALL param%initiate()\nCALL SetSTScalarMeshFieldParam( &\n  & param=param, &\n  & name='aScalar', &\n  & varType =Time, &\n  & fieldType=TypeField%Normal, &\n  & engine='NATIVE_SERIAL', &\n  & defineOn=Nodal, &\n  & nns=6, nnt=2 )\nCALL obj%Initiate( param=param, mesh=amesh )\nCALL obj%Display( 'obj: ' )\ncall display(amesh%GetTotalElements(), \"total elements: \" )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The above code will initiate an instance of ",(0,i.jsx)(n.code,{children:"STScalarMeshField_"}),", which will contain following data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"Object INITIATED: TRUE\nname: aScalar\nprefix: STScalarMeshField\nfieldType: NORMAL              \nengine: NATIVE_SERIAL\ntSize: 484\ndefineOn: Nodal\nrank: Scalar\nvarType: Time\nshape: \n-------\n   6   \nval ALLOCATED: TRUE\nmesh ASSOCIATED: TRUE\ntotal elements: 484\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's try to understand the above code:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We save data in a two dimensional array ",(0,i.jsx)(n.code,{children:"val"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The number of rows in ",(0,i.jsx)(n.code,{children:"val"})," for above example is ",(0,i.jsx)(n.code,{children:"6"}),". This is because we have set ",(0,i.jsx)(n.code,{children:"varType=Time"}),", which means the scalar data changes in ",(0,i.jsx)(n.code,{children:"Time"})," (and remains constant in space) inside the element."]}),"\n",(0,i.jsxs)(n.li,{children:["Because, we have set ",(0,i.jsx)(n.code,{children:"varType=Time"}),", therefore ",(0,i.jsx)(n.code,{children:"val(1:6, iel)"})," denotes the value of scalar field at 6 time-nodes of element. Read more about the ",(0,i.jsx)(n.a,{href:"/docs-api/AbstractMeshField/AbstractMeshField_",children:"Shape"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:["The number of columns in ",(0,i.jsx)(n.code,{children:"val"})," is ",(0,i.jsx)(n.code,{children:"484"})," (which is the total number of elements in the mesh), this is because the ",(0,i.jsx)(n.code,{children:"fieldType=Regular"})," (i.e., changes across all the elements)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-3",children:"Step 3:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL amesh%Deallocate()\n  CALL meshfile%Close()\n  CALL meshfile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}const x={},j="Initiate",f={id:"STTensorMeshField/Initiate",title:"Initiate",description:"Inherited from AbstractMeshField",source:"@site/docs/docs-api/STTensorMeshField/Initiate.md",sourceDirName:"STTensorMeshField",slug:"/STTensorMeshField/Initiate",permalink:"/docs-api/STTensorMeshField/Initiate",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/STTensorMeshField/Initiate.md",tags:[],version:"current",lastUpdatedAt:1702011327,formattedLastUpdatedAt:"Dec 8, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Import",permalink:"/docs-api/STTensorMeshField/Import"},next:{title:"Set",permalink:"/docs-api/STTensorMeshField/Set"}},T={},I=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2}];function A(e){const n={a:"a",h1:"h1",h2:"h2",p:"p",...(0,s.a)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"initiate",children:"Initiate"}),"\n",(0,i.jsxs)(n.p,{children:["Inherited from ",(0,i.jsx)(n.a,{href:"/docs-api/AbstractMeshField",children:"AbstractMeshField"})]}),"\n","\n",(0,i.jsx)(t.default,{}),"\n",(0,i.jsx)(n.h2,{id:"example-1",children:"Example 1"}),"\n","\n",(0,i.jsxs)(a,{children:[(0,i.jsx)("summary",{children:"Click here to see the example"}),(0,i.jsx)("div",{children:(0,i.jsx)(r,{})})]}),"\n",(0,i.jsx)(n.h2,{id:"example-2",children:"Example 2"}),"\n","\n",(0,i.jsxs)(a,{children:[(0,i.jsx)("summary",{children:"Click here to see the example"}),(0,i.jsx)("div",{children:(0,i.jsx)(h,{})})]}),"\n",(0,i.jsx)(n.h2,{id:"example-3",children:"Example 3"}),"\n","\n",(0,i.jsxs)(a,{children:[(0,i.jsx)("summary",{children:"Click here to see the example"}),(0,i.jsx)("div",{children:(0,i.jsx)(o,{})})]}),"\n",(0,i.jsx)(n.h2,{id:"example-4",children:"Example 4"}),"\n","\n",(0,i.jsxs)(a,{children:[(0,i.jsx)("summary",{children:"Click here to see the example"}),(0,i.jsx)("div",{children:(0,i.jsx)(p,{})})]}),"\n",(0,i.jsx)(n.h2,{id:"example-5",children:"Example 5"}),"\n","\n","\n",(0,i.jsxs)(a,{children:[(0,i.jsx)("summary",{children:"Click here to see the example"}),(0,i.jsx)("div",{children:(0,i.jsx)(p,{})})]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(A,{...e})}):A(e)}},82730:(e,n,a)=>{a.d(n,{Z:()=>i});const i=a.p+"assets/images/mesh-55f489ea84bf8e71cc3043bc11a36e32.png"},11151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>l});var i=a(67294);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);