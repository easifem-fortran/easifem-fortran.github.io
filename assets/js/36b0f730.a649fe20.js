"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[87497],{37862:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var n=i(85893),s=i(11151);const r={sidebar_position:2},o="Structure",a={id:"CSRSparsity/CSRSparsity_",title:"Structure",description:"CSRSparsity is data type for handling CSRMatrix in EASIFEM.",source:"@site/docs/docs-api/CSRSparsity/CSRSparsity_.md",sourceDirName:"CSRSparsity",slug:"/CSRSparsity/CSRSparsity_",permalink:"/docs-api/CSRSparsity/CSRSparsity_",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/CSRSparsity/CSRSparsity_.md",tags:[],version:"current",lastUpdatedAt:1706190062,formattedLastUpdatedAt:"Jan 25, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CSRSparsity",permalink:"/docs-api/CSRSparsity/"},next:{title:"Deallocate",permalink:"/docs-api/CSRSparsity/Deallocate"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"structure",children:"Structure"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"CSRSparsity_"})," is data type for handling ",(0,n.jsx)(t.code,{children:"CSRMatrix_"})," in EASIFEM."]}),"\n",(0,n.jsxs)(t.p,{children:["It is encapsulated inside ",(0,n.jsx)(t.code,{children:"CSRMatrix_"}),", and contains only the sparsity pattern not the matrix values, which we can use a single instance of ",(0,n.jsx)(t.code,{children:"CSRSparsity_"})," to define several ",(0,n.jsx)(t.code,{children:"CSRMatrix_"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"The structure is given below."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-fortran",children:"TYPE :: CSRSparsity_\nINTEGER( I4B ) :: nnz = 0\nINTEGER( I4B ) :: ncol = 0\nINTEGER( I4B ) :: nrow = 0\nLOGICAL( LGT ) :: isSorted = .FALSE.\nLOGICAL( LGT ) :: isInitiated = .FALSE.\nLOGICAL( LGT ) :: isSparsityLock = .FALSE.\nINTEGER( I4B ), ALLOCATABLE :: IA( : )\nINTEGER( I4B ), ALLOCATABLE :: JA( : )\nTYPE( IntVector_ ), ALLOCATABLE :: row( : )\nTYPE( DOF_ ) :: dof\nEND TYPE CSRSparsity_\n"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"IA"})," : size of IA is number of rows in the sparse matrix. It contains indices for accessing the entries in ",(0,n.jsx)(t.code,{children:"JA"}),". For example, ",(0,n.jsx)(t.code,{children:"IA( iRow )"})," to ",(0,n.jsx)(t.code,{children:"IA( iRow + 1 ) - 1"})," are indices of entries of matrix of ",(0,n.jsx)(t.code,{children:"iRow"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"JA"}),": size of ",(0,n.jsx)(t.code,{children:"JA"})," is ",(0,n.jsx)(t.code,{children:"NNZ"}),". ",(0,n.jsx)(t.code,{children:"JA"})," contains the column indices."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},11151:(e,t,i)=>{i.d(t,{Z:()=>a,a:()=>o});var n=i(67294);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);