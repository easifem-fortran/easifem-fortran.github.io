"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[88924],{12590:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>T,default:()=>a,frontMatter:()=>I,metadata:()=>i,toc:()=>E});var N=t(85893),o=t(11151);const I={},T="SuperluLinSolve",i={id:"CSRMatrix/SuperluLinSolve",title:"SuperluLinSolve",description:"Interface",source:"@site/docs/docs-api/CSRMatrix/SuperluLinSolve.md",sourceDirName:"CSRMatrix",slug:"/CSRMatrix/SuperluLinSolve",permalink:"/docs-api/CSRMatrix/SuperluLinSolve",draft:!1,unlisted:!1,editUrl:"https://github.com/vickysharma0812/vickysharma0812.github.io/tree/main/docs/docs-api/CSRMatrix/SuperluLinSolve.md",tags:[],version:"current",lastUpdatedAt:1701103026,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Size",permalink:"/docs-api/CSRMatrix/Size"},next:{title:"SymLargestEigenval",permalink:"/docs-api/CSRMatrix/SymLargestEigenval"}},r={},E=[{value:"Interface",id:"interface",level:2}];function s(n){const e={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,o.a)(),...n.components};return(0,N.jsxs)(N.Fragment,{children:[(0,N.jsx)(e.h1,{id:"superlulinsolve",children:"SuperluLinSolve"}),"\n",(0,N.jsx)(e.h2,{id:"interface",children:"Interface"}),"\n",(0,N.jsx)(e.pre,{children:(0,N.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE LinSolve1(X, A, B, isTranspose, isFactored, &\n    & ColPerm, Equil, IterRefine, PivotGrowth, DiagPivotThresh, &\n    & ConditionNumber, SymmetricMode, PrintStat, info)\n    REAL(DFP), INTENT(INOUT) :: X(:)\n    !! Solution\n    TYPE(CSRMatrix_), INTENT(INOUT) :: A\n    !! CSRMatrix\n    REAL(DFP), INTENT(IN) :: B(:)\n    !! RHS, it will not be modified, we will make a copy of it\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! Should we solve `A*X=B` or `transpose(A)*X=B`\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isFactored\n    !! is A already factored\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ColPerm\n    !! Colperm_t%NATURAL\n    !! Colperm_t%MMD_ATA\n    !! Colperm_t%MMD_AT_PLUS_A\n    !! Colperm_t%COLAMD\n    !! Colperm_t%MY_PERMC\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: Equil\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: IterRefine\n    !! IterRefine_t%NO\n    !! IterRefine_t%SLU_SINGLE\n    !! IterRefine_t%SLU_DOUBLE\n    !! IterRefine_t%SLU_EXTRA\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PivotGrowth\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    REAL(DFP), OPTIONAL, INTENT(IN) :: DiagPivotThresh\n    !! between 0 and 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ConditionNumber\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: SymmetricMode\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PrintStat\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: info\n    !! if info equal  to zero then success, else failure\n  END SUBROUTINE LinSolve1\nEND INTERFACE\n"})}),"\n",(0,N.jsx)(e.pre,{children:(0,N.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE LinSolve2(X, A, B, isTranspose, isFactored, &\n    & ColPerm, Equil, IterRefine, PivotGrowth, DiagPivotThresh, &\n    & ConditionNumber, SymmetricMode, PrintStat, info)\n    REAL(DFP), INTENT(INOUT) :: X(:, :)\n    !! Solution\n    TYPE(CSRMatrix_), INTENT(INOUT) :: A\n    !! CSRMatrix\n    REAL(DFP), INTENT(IN) :: B(:, :)\n    !! RHS, it will not be modified, we will make a copy of it\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! Should we solve `A*X=B` or `transpose(A)*X=B`\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isFactored\n    !! is A already factored\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ColPerm\n    !! Colperm_t%NATURAL\n    !! Colperm_t%MMD_ATA\n    !! Colperm_t%MMD_AT_PLUS_A\n    !! Colperm_t%COLAMD\n    !! Colperm_t%MY_PERMC\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: Equil\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: IterRefine\n    !! IterRefine_t%NO\n    !! IterRefine_t%SLU_SINGLE\n    !! IterRefine_t%SLU_DOUBLE\n    !! IterRefine_t%SLU_EXTRA\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PivotGrowth\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    REAL(DFP), OPTIONAL, INTENT(IN) :: DiagPivotThresh\n    !! between 0 and 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ConditionNumber\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: SymmetricMode\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PrintStat\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: info\n    !! if info equal  to zero then success, else failure\n  END SUBROUTINE LinSolve2\nEND INTERFACE\n\n"})}),"\n",(0,N.jsx)(e.pre,{children:(0,N.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE LinSolve3(A, B, isTranspose, isFactored, &\n    & ColPerm, Equil, IterRefine, PivotGrowth, DiagPivotThresh, &\n    & ConditionNumber, SymmetricMode, PrintStat, info)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: A\n    !! CSRMatrix\n    REAL(DFP), INTENT(INOUT) :: B(:)\n    !! RHS, it will not be modified, we will make a copy of it\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! Should we solve `A*X=B` or `transpose(A)*X=B`\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isFactored\n    !! is A already factored\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ColPerm\n    !! Colperm_t%NATURAL\n    !! Colperm_t%MMD_ATA\n    !! Colperm_t%MMD_AT_PLUS_A\n    !! Colperm_t%COLAMD\n    !! Colperm_t%MY_PERMC\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: Equil\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: IterRefine\n    !! IterRefine_t%NO\n    !! IterRefine_t%SLU_SINGLE\n    !! IterRefine_t%SLU_DOUBLE\n    !! IterRefine_t%SLU_EXTRA\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PivotGrowth\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    REAL(DFP), OPTIONAL, INTENT(IN) :: DiagPivotThresh\n    !! between 0 and 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ConditionNumber\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: SymmetricMode\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PrintStat\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: info\n    !! if info equal  to zero then success, else failure\n  END SUBROUTINE LinSolve3\nEND INTERFACE\n"})}),"\n",(0,N.jsx)(e.pre,{children:(0,N.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE LinSolve4(A, B, isTranspose, isFactored, &\n    & ColPerm, Equil, IterRefine, PivotGrowth, DiagPivotThresh, &\n    & ConditionNumber, SymmetricMode, PrintStat, info)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: A\n    !! CSRMatrix\n    REAL(DFP), INTENT(INOUT) :: B(:, :)\n    !! RHS, it will be modified on return, solution is in B\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! Should we solve `A*X=B` or `transpose(A)*X=B`\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isFactored\n    !! is A already factored\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ColPerm\n    !! Colperm_t%NATURAL\n    !! Colperm_t%MMD_ATA\n    !! Colperm_t%MMD_AT_PLUS_A\n    !! Colperm_t%COLAMD\n    !! Colperm_t%MY_PERMC\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: Equil\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: IterRefine\n    !! IterRefine_t%NO\n    !! IterRefine_t%SLU_SINGLE\n    !! IterRefine_t%SLU_DOUBLE\n    !! IterRefine_t%SLU_EXTRA\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PivotGrowth\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    REAL(DFP), OPTIONAL, INTENT(IN) :: DiagPivotThresh\n    !! between 0 and 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ConditionNumber\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: SymmetricMode\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PrintStat\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: info\n    !! if info equal  to zero then success, else failure\n  END SUBROUTINE LinSolve4\nEND INTERFACE\n\n"})})]})}function a(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,N.jsx)(e,{...n,children:(0,N.jsx)(s,{...n})}):s(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>i,a:()=>T});var N=t(67294);const o={},I=N.createContext(o);function T(n){const e=N.useContext(I);return N.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:T(n.components),N.createElement(I.Provider,{value:e},n.children)}}}]);