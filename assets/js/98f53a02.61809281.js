"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[77780],{66946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>N,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(85893),a=n(11151);const i={},o="MatVec",s={id:"AbstractMatrixField/MatVec",title:"MatVec",description:"Perform matrix vector multipliction",source:"@site/docs/docs-api/AbstractMatrixField/MatVec.md",sourceDirName:"AbstractMatrixField",slug:"/AbstractMatrixField/MatVec",permalink:"/docs-api/AbstractMatrixField/MatVec",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/AbstractMatrixField/MatVec.md",tags:[],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IsPreconditionSet",permalink:"/docs-api/AbstractMatrixField/IsPreconditionSet"},next:{title:"ReversePermutation",permalink:"/docs-api/AbstractMatrixField/ReversePermutation"}},c={},d=[{value:"Interface",id:"interface",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"matvec",children:"MatVec"}),"\n",(0,r.jsx)(t.p,{children:"Perform matrix vector multipliction"}),"\n",(0,r.jsx)(t.h2,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fortran",children:"INTERFACE\n  SUBROUTINE Matvec1(obj, x, y, isTranspose, addContribution, &\n    & scale)\n    IMPORT :: AbstractMatrixField_, DFP, LGT\n    CLASS(AbstractMatrixField_), INTENT(IN) :: obj\n    REAL(DFP), INTENT(INOUT) :: y(:)\n    !! Output vector y=Ax\n    REAL(DFP), INTENT(IN) :: x(:)\n    !! Input vector in y=Ax\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! True if we have to use TRANSPOSE of matrix\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n    !! Default is FALSE\n    !! if true then we do not set y = 0, and perform\n    !! y = y + matvec(obj, x)\n    !! if false, then we perform y = matvec(obj, x)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n  END SUBROUTINE Matvec1\nEND INTERFACE\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fortran",children:"INTERFACE\n  SUBROUTINE Matvec2(obj, x, y, isTranspose, addContribution, &\n    & scale)\n    IMPORT :: AbstractMatrixField_, AbstractNodeField_, LGT, DFP\n    CLASS(AbstractMatrixField_), INTENT(IN) :: obj\n    CLASS(AbstractNodeField_), INTENT(INOUT) :: y\n    !! Output vector y=Ax\n    CLASS(AbstractNodeField_), INTENT(IN) :: x\n    !! Input vector in y=Ax\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! True if we have to use TRANSPOSE of matrix\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n    !! Default is FALSE\n    !! if true then we do not set y = 0, and perform\n    !! y = y + matvec(obj, x)\n    !! if false, then we perform y = matvec(obj, x)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n  END SUBROUTINE Matvec2\nEND INTERFACE\n"})})]})}function N(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>o});var r=n(67294);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);