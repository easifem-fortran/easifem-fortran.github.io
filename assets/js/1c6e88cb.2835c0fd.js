"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[9471],{83588:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>t,contentTitle:()=>I,default:()=>s,frontMatter:()=>E,metadata:()=>c,toc:()=>i});var N=a(85893),l=a(11151),r=a(74866),o=a(85162);const E={},I="Add",c={id:"CSRMatrix/Add",title:"Add",description:"Add values to CSRMatrix.",source:"@site/docs/docs-api/CSRMatrix/Add.md",sourceDirName:"CSRMatrix",slug:"/CSRMatrix/Add",permalink:"/docs-api/CSRMatrix/Add",draft:!1,unlisted:!1,editUrl:"https://github.com/vickysharma0812/vickysharma0812.github.io/tree/main/docs/docs-api/CSRMatrix/Add.md",tags:[],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AMatVec",permalink:"/docs-api/CSRMatrix/AMatVec"},next:{title:"Allocate",permalink:"/docs-api/CSRMatrix/Allocate"}},t={},i=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 7",id:"interface-7-1",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 8",id:"interface-8-1",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2},{value:"Interface 11",id:"interface-11",level:2},{value:"Interface 12",id:"interface-12",level:2},{value:"Interface 13",id:"interface-13",level:2},{value:"Interface 14",id:"interface-14",level:2},{value:"Interface 15",id:"interface-15",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,N.jsxs)(N.Fragment,{children:[(0,N.jsx)(n.h1,{id:"add",children:"Add"}),"\n",(0,N.jsx)(n.p,{children:"Add values to CSRMatrix."}),"\n",(0,N.jsx)(n.p,{children:"Calling example:"}),"\n",(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, nodenum(:), value(:,:), scale)\n\nADD(obj, nodenum(:), value(:,:), scale, storageFMT)\n\nADD(obj, value, scale)\n\nADD(obj, irow, icolumn, value, scale)\n\nADD(obj, inodenum, jnodenum, idof, jdof, value, scale)\n\nADD(obj, nodenum(:), value, scale)\n\nADD(obj, inodenum(:), jnodenum(:), ivar, jvar, value(:,:), scale)\n\nADD(obj, inodenum, jnodenum, ivar, jvar, idof, jdof, value, scale)\n\nADD(obj, inodenum(:), jnodenum(:), ivar, jvar, idof, jdof, value(:,:), scale)\n\nADD(obj, inodenum, jnodenum, ivar, jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale)\n\nADD(obj, inodenum(:), jnodenum(:), ivar, jvar, value, scale)\n\nADD(obj, inodenum(:), jnodenum(:), ivar, jvar, idof, jdof, value, scale)\n\nADD(obj, inodenum(:), jnodenum(:), ivar, jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale)\n\nADD(obj, inodenum(:), jnodenum(:), ivar, jvar, ispacecompo, itimecompo(:), jspacecompo, jtimecompo(:), value, scale)\n\nADD(obj, inodenum(:), jnodenum(:), ivar, jvar, ispacecompo(:), itimecompo, jspacecompo(:), jtimecompo, value, scale)\n"})}),"\n","\n","\n",(0,N.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, nodenum, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    !! Node numbers\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! Element finite element matrix\n    REAL(DFP), INTENT(IN) :: scale\n    !! Scale is used to scale the Val before adding it to the obj\n  END SUBROUTINE add\nEND INTERFACE \n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, nodenum, VALUE, scale, storageFMT)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    !! Node numbers\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! Element finite element matrix\n    REAL(DFP), INTENT(IN) :: scale\n    !! Scale is used to scale the Val before adding it to the obj\n    INTEGER(I4B), INTENT(IN) :: storageFMT\n    !! Storage format of element finite matrix\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, irow, icolumn, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: irow\n    INTEGER(I4B), INTENT(IN) :: icolumn\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, idof, &\n    & jdof, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\n    INTEGER(I4B), INTENT(IN) :: idof\n    INTEGER(I4B), INTENT(IN) :: jdof\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, nodenum, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-7-1",children:"Interface 7"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-8-1",children:"Interface 8"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\n    INTEGER(I4B), INTENT(IN) :: itimecompo\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-11",children:"Interface 11"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, &\n    & ivar, jvar, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: jvar\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-12",children:"Interface 12"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-13",children:"Interface 13"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\n    INTEGER(I4B), INTENT(IN) :: itimecompo\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-14",children:"Interface 14"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\n    INTEGER(I4B), INTENT(IN) :: itimecompo(:)\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\n    INTEGER(I4B), INTENT(IN) :: jtimecompo(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,N.jsx)(n.h2,{id:"interface-15",children:"Interface 15"}),"\n",(0,N.jsxs)(r.Z,{children:[(0,N.jsx)(o.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,N.jsx)(n.pre,{children:(0,N.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: ispacecompo(:)\n    INTEGER(I4B), INTENT(IN) :: itimecompo\n    INTEGER(I4B), INTENT(IN) :: jspacecompo(:)\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,N.jsx)(o.Z,{value:"example",label:"\ufe0f\u0700 See example"}),(0,N.jsx)(o.Z,{value:"close",label:"\u21a2 "})]})]})}function s(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,N.jsx)(n,{...e,children:(0,N.jsx)(d,{...e})}):d(e)}},85162:(e,n,a)=>{a.d(n,{Z:()=>o});a(67294);var N=a(86010);const l={tabItem:"tabItem_Ymn6"};var r=a(85893);function o(e){let{children:n,hidden:a,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,N.Z)(l.tabItem,o),hidden:a,children:n})}},74866:(e,n,a)=>{a.d(n,{Z:()=>p});var N=a(67294),l=a(86010),r=a(12466),o=a(16550),E=a(20469),I=a(91980),c=a(67392),t=a(50012);function i(e){return N.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,N.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:a}=e;return(0,N.useMemo)((()=>{const e=n??function(e){return i(e).map((e=>{let{props:{value:n,label:a,attributes:N,default:l}}=e;return{value:n,label:a,attributes:N,default:l}}))}(a);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function s(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function T(e){let{queryString:n=!1,groupId:a}=e;const l=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,I._X)(r),(0,N.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(l.location.search);n.set(r,e),l.replace({...l.location,search:n.toString()})}),[r,l])]}function u(e){const{defaultValue:n,queryString:a=!1,groupId:l}=e,r=d(e),[o,I]=(0,N.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!s({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const N=a.find((e=>e.default))??a[0];if(!N)throw new Error("Unexpected error: 0 tabValues");return N.value}({defaultValue:n,tabValues:r}))),[c,i]=T({queryString:a,groupId:l}),[u,m]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,r]=(0,t.Nk)(a);return[l,(0,N.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:l}),j=(()=>{const e=c??u;return s({value:e,tabValues:r})?e:null})();(0,E.Z)((()=>{j&&I(j)}),[j]);return{selectedValue:o,selectValue:(0,N.useCallback)((e=>{if(!s({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);I(e),i(e),m(e)}),[i,m,r]),tabValues:r}}var m=a(72389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=a(85893);function R(e){let{className:n,block:a,selectedValue:N,selectValue:o,tabValues:E}=e;const I=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),t=e=>{const n=e.currentTarget,a=I.indexOf(n),l=E[a].value;l!==N&&(c(n),o(l))},i=e=>{let n=null;switch(e.key){case"Enter":t(e);break;case"ArrowRight":{const a=I.indexOf(e.currentTarget)+1;n=I[a]??I[0];break}case"ArrowLeft":{const a=I.indexOf(e.currentTarget)-1;n=I[a]??I[I.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},n),children:E.map((e=>{let{value:n,label:a,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,ref:e=>I.push(e),onKeyDown:i,onClick:t,...r,className:(0,l.Z)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":N===n}),children:a??n},n)}))})}function v(e){let{lazy:n,children:a,selectedValue:l}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===l));return e?(0,N.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,N.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function x(e){const n=u(e);return(0,f.jsxs)("div",{className:(0,l.Z)("tabs-container",j.tabList),children:[(0,f.jsx)(R,{...e,...n}),(0,f.jsx)(v,{...e,...n})]})}function p(e){const n=(0,m.Z)();return(0,f.jsx)(x,{...e,children:i(e.children)},String(n))}},11151:(e,n,a)=>{a.d(n,{Z:()=>E,a:()=>o});var N=a(67294);const l={},r=N.createContext(l);function o(e){const n=N.useContext(r);return N.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function E(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),N.createElement(r.Provider,{value:n},e.children)}}}]);