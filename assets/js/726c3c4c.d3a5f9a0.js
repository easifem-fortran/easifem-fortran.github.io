"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[52279],{82786:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>N,contentTitle:()=>E,default:()=>T,frontMatter:()=>f,metadata:()=>g,toc:()=>j});var l=a(85893),r=a(11151),t=a(74866),i=a(85162);function s(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test ",(0,l.jsx)(n.a,{href:"/docs-api/ScalarField/Set",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.725701,   \n0.634809,   \n0.398595,   \n0.418203,   \n0.195654,   \n0.874868,   \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'  CALL obj%get( value=avar, globalNode=2)\n  CALL Display(avar, "avar = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"avar = 0.634809\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(s,{...e})}):s(e)}function o(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test ",(0,l.jsx)(n.a,{href:"/docs-api/ScalarField/Set",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.829034,   \n0.103488,   \n0.686197,   \n0.979929,   \n0.115532,   \n0.829484,   \n0.007732,   \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Get all entries"',children:'  CALL obj%get( value=realVec)\n  CALL Display(realVec(1:5), "realVec(1:5) = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"realVec(1:5) = \n---------------\n   0.829034    \n   0.103488    \n   0.686197    \n   0.979929    \n   0.115532    \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}function m(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test ",(0,l.jsx)(n.a,{href:"/docs-api/ScalarField/Set",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.832033,   \n0.745878,   \n0.844285,   \n0.691231,   \n0.996872,   \n0.347315,   \n0.827425,   \n0.263551,   \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Get multiple entries"',children:'  CALL obj%get( value=realVec, globalNode=[1,2,3,4,5])\n  CALL Display(realVec(1:5), "realVec(1:5) = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"realVec(1:5) = \n---------------\n   0.832033    \n   0.745878    \n   0.844285    \n   0.691231    \n   0.996872    \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(m,{...e})}):m(e)}function L(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test ",(0,l.jsx)(n.a,{href:"/docs-api/ScalarField/Set",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.965852,   \n0.106486,   \n0.227661,   \n0.278568,   \n0.979695,   \n0.156565,   \n0.007468,   \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Get multiple entries"',children:'  CALL obj%get( value=realVec, istart=1, iend=5, stride=1)\n  CALL Display(realVec(1:5), "realVec(1:5) = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"realVec(1:5) = \n---------------\n   0.965852    \n   0.106486    \n   0.227661    \n   0.278568    \n   0.979695    \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(L,{...e})}):L(e)}function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we test ",(0,l.jsx)(n.a,{href:"/docs-api/ScalarField/Set",children:"Get"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n  TYPE(FEVariable_) :: fevar\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.623683,   \n0.370695,   \n0.967630,   \n0.835710,   \n0.821063,   \n0.613570,   \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Get multiple entries"',children:'  CALL obj%get( value=fevar, globalNode=arange(1,5,1) )\n  CALL Display(fevar, "fevar = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"fevar = \n# RANK :: 0 (SCALAR)\n# VarType: SPACE\n# VALUE: \n---------\n0.623683 \n0.370695 \n0.967630 \n0.835710 \n0.821063 \n\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function A(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}const f={},E="Get",g={id:"ScalarField/Get",title:"Get",description:"Get the entries from scalar field.",source:"@site/docs/docs-api/ScalarField/Get.md",sourceDirName:"ScalarField",slug:"/ScalarField/Get",permalink:"/docs-api/ScalarField/Get",draft:!1,unlisted:!1,editUrl:"https://github.com/vickysharma0812/vickysharma0812.github.io/tree/main/docs/docs-api/ScalarField/Get.md",tags:[],version:"current",lastUpdatedAt:1701101849,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Export",permalink:"/docs-api/ScalarField/Export"},next:{title:"GetPointer",permalink:"/docs-api/ScalarField/GetPointer"}},N={},j=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2}];function x(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"get",children:"Get"}),"\n",(0,l.jsx)(n.p,{children:"Get the entries from scalar field."}),"\n",(0,l.jsx)(n.p,{children:"Calling examples:"}),"\n","\n","\n",(0,l.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsxs)(i.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get1(obj, VALUE, globalNode)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    REAL(DFP), INTENT(INOUT) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: globalNode\n  END SUBROUTINE get1\nEND INTERFACE\n"})}),(0,l.jsx)(n.p,{children:"Get a single entry."})]}),(0,l.jsx)(i.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(c,{})}),(0,l.jsx)(i.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsxs)(i.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get2(obj, VALUE)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n  END SUBROUTINE get2\nEND INTERFACE\n"})}),(0,l.jsx)(n.p,{children:"Get all entries in a vector of reals."})]}),(0,l.jsx)(i.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(d,{})}),(0,l.jsx)(i.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsxs)(i.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get3(obj, VALUE, globalNode)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n  END SUBROUTINE get3\nEND INTERFACE\n"})}),(0,l.jsx)(n.p,{children:"Get all multiple entries."})]}),(0,l.jsx)(i.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(u,{})}),(0,l.jsx)(i.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsxs)(i.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get4(obj, VALUE, istart, iend, stride)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n  END SUBROUTINE get4\nEND INTERFACE\n"})}),(0,l.jsx)(n.p,{children:"Get multiple entries by using triplets."})]}),(0,l.jsx)(i.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(p,{})}),(0,l.jsx)(i.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsxs)(i.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get5(obj, VALUE, globalNode)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    TYPE(FEVariable_), INTENT(INOUT) :: VALUE\n  !! Scalar Nodal FEVariable\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n  END SUBROUTINE get5\nEND INTERFACE\n"})}),(0,l.jsxs)(n.p,{children:["Get multiple entries in ",(0,l.jsx)(n.a,{href:"/docs-api/FEVariable/FEVariable_",children:"FEVariable"})]})]}),(0,l.jsx)(i.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(A,{})}),(0,l.jsx)(i.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get6(obj, VALUE)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    CLASS(ScalarField_), INTENT(INOUT) :: VALUE\n  END SUBROUTINE get6\nEND INTERFACE\n"})}),"\n",(0,l.jsx)(n.p,{children:"Get a scalarfield in an instance of scalar field."})]})}function T(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(x,{...e})}):x(e)}},85162:(e,n,a)=>{a.d(n,{Z:()=>i});a(67294);var l=a(86010);const r={tabItem:"tabItem_Ymn6"};var t=a(85893);function i(e){let{children:n,hidden:a,className:i}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,l.Z)(r.tabItem,i),hidden:a,children:n})}},74866:(e,n,a)=>{a.d(n,{Z:()=>x});var l=a(67294),r=a(86010),t=a(12466),i=a(16550),s=a(20469),c=a(91980),o=a(67392),d=a(50012);function m(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:a}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:a,attributes:l,default:r}}=e;return{value:n,label:a,attributes:l,default:r}}))}(a);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function L(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:a}=e;const r=(0,i.k6)(),t=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,c._X)(t),(0,l.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(r.location.search);n.set(t,e),r.replace({...r.location,search:n.toString()})}),[t,r])]}function h(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,t=u(e),[i,c]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!L({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const l=a.find((e=>e.default))??a[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:t}))),[o,m]=p({queryString:a,groupId:r}),[h,A]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,t]=(0,d.Nk)(a);return[r,(0,l.useCallback)((e=>{a&&t.set(e)}),[a,t])]}({groupId:r}),f=(()=>{const e=o??h;return L({value:e,tabValues:t})?e:null})();(0,s.Z)((()=>{f&&c(f)}),[f]);return{selectedValue:i,selectValue:(0,l.useCallback)((e=>{if(!L({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);c(e),m(e),A(e)}),[m,A,t]),tabValues:t}}var A=a(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var E=a(85893);function g(e){let{className:n,block:a,selectedValue:l,selectValue:i,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.o5)(),d=e=>{const n=e.currentTarget,a=c.indexOf(n),r=s[a].value;r!==l&&(o(n),i(r))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}n?.focus()};return(0,E.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},n),children:s.map((e=>{let{value:n,label:a,attributes:t}=e;return(0,E.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>c.push(e),onKeyDown:m,onClick:d,...t,className:(0,r.Z)("tabs__item",f.tabItem,t?.className,{"tabs__item--active":l===n}),children:a??n},n)}))})}function N(e){let{lazy:n,children:a,selectedValue:r}=e;const t=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===r));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,E.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function j(e){const n=h(e);return(0,E.jsxs)("div",{className:(0,r.Z)("tabs-container",f.tabList),children:[(0,E.jsx)(g,{...e,...n}),(0,E.jsx)(N,{...e,...n})]})}function x(e){const n=(0,A.Z)();return(0,E.jsx)(j,{...e,children:m(e.children)},String(n))}},11151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>i});var l=a(67294);const r={},t=l.createContext(r);function i(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);