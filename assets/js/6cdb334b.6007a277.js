"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[83875],{73601:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>E,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=a(85893),r=a(11151);const i={},o="GetDivergence",c={id:"ElemshapeData/GetDivergence",title:"GetDivergence",description:"The following subroutine returns the  Divergence of a vector",source:"@site/docs/docs-api/ElemshapeData/GetDivergence.md",sourceDirName:"ElemshapeData",slug:"/ElemshapeData/GetDivergence",permalink:"/docs-api/ElemshapeData/GetDivergence",draft:!1,unlisted:!1,editUrl:"https://github.com/vickysharma0812/vickysharma0812.github.io/tree/main/docs/docs-api/ElemshapeData/GetDivergence.md",tags:[],version:"current",lastUpdatedAt:1701101849,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Structure",permalink:"/docs-api/ElemshapeData/ElemshapeData_"},next:{title:"GetHRGNParam",permalink:"/docs-api/ElemshapeData/GetHRGNParam"}},s={},l=[];function g(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"getdivergence",children:"GetDivergence"}),"\n",(0,t.jsx)(n.p,{children:"The following subroutine returns the  Divergence of a vector"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  MODULE PURE SUBROUTINE getDivergence_1(obj, lg, val)\n    CLASS(ElemshapeData_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:)\n    !!  Divergence at integration points\n    REAL(DFP), INTENT(IN) :: val(:, :)\n    !! space nodal values of vector in `xiJ` format\n    !! row index: space component\n    !! col index: node number\n  END SUBROUTINE getDivergence_1\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following subroutine returns the  Divergence of a vector"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  MODULE PURE SUBROUTINE getDivergence_2(obj, lg, val)\n    CLASS(ElemshapeData_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:)\n    !!  Divergence at integration points\n    REAL(DFP), INTENT(IN) :: val(:, :, :)\n    !! space-time nodal values of vector in `xiJa` format\n  END SUBROUTINE getDivergence_2\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following subroutine returns the  Divergence of a vector"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  MODULE PURE SUBROUTINE getDivergence_3(obj, lg, val)\n    CLASS(ElemshapeData_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:)\n    !!  Divergence of vector at integration points\n    TYPE(FEVariable_), INTENT(IN) :: val\n    !! vector finite-element variable\n  END SUBROUTINE getDivergence_3\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following subroutine returns the  Divergence of a matrix"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  MODULE PURE SUBROUTINE getDivergence_4(obj, lg, val)\n    CLASS(ElemshapeData_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:, :)\n    !!  Divergence at integration points\n    REAL(DFP), INTENT(IN) :: val(:, :, :)\n    !! space nodal values of matrix in (i,j,I) format\n  END SUBROUTINE getDivergence_4\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following subroutine returns the  Divergence of a vector"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  MODULE PURE SUBROUTINE getDivergence_5(obj, lg, val)\n    CLASS(ElemshapeData_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:, :)\n    !!  Divergence at integration points\n    REAL(DFP), INTENT(IN) :: val(:, :, :, :)\n    !! space-time nodal values of matrix in (i,j,I,a) format\n  END SUBROUTINE getDivergence_5\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following subroutine returns the  Divergence of a vector"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  MODULE PURE SUBROUTINE getDivergence_6(obj, lg, val)\n    CLASS(ElemshapeData_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:, :)\n    !!  Divergence at integration points\n    TYPE(FEVariable_), INTENT(IN) :: val\n    !! space/space-time nodal values of matrix in (i,j,I) format\n  END SUBROUTINE getDivergence_6\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following subroutine returns the  Divergence"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  MODULE PURE SUBROUTINE getDivergence_7(obj, lg, val)\n    CLASS(ElemshapeData_), INTENT(IN) :: obj\n    TYPE(FEVariable_), INTENT(INOUT) :: lg\n    !!  Divergence of scalar/vector/matrix at space integration points\n    TYPE(FEVariable_), INTENT(IN) :: val\n  END SUBROUTINE getDivergence_7\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following subroutine returns the  Divergence"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  MODULE PURE SUBROUTINE getDivergence_8(obj, lg, val)\n    CLASS(STElemshapeData_), INTENT(IN) :: obj(:)\n    TYPE(FEVariable_), INTENT(INOUT) :: lg\n    !!  Divergence of scalar/vector/matrix at space-time\n    !! integration points\n    TYPE(FEVariable_), INTENT(IN) :: val\n    !! space time nodal values of scalar/vector/matrix\n  END SUBROUTINE getDivergence_8\n"})})]})}function E(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>c,a:()=>o});var t=a(67294);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);