"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[48374],{80442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=t(85893),o=t(11151);const a={},i="Structure",c={id:"IterationData/IterationData_",title:"Structure",description:"",source:"@site/docs/docs-api/IterationData/IterationData_.md",sourceDirName:"IterationData",slug:"/IterationData/IterationData_",permalink:"/docs-api/IterationData/IterationData_",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/IterationData/IterationData_.md",tags:[],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IterationData",permalink:"/docs-api/IterationData/"},next:{title:"Jacobi1D",permalink:"/docs-api/Jacobi1D/"}},s={},u=[];function d(e){const n={code:"code",h1:"h1",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"structure",children:"Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"TYPE :: IterationData_\n  INTEGER(I4B) :: maxIter = 100\n    !! Maximum number of iterations allowed\n  INTEGER(I4B) :: iterationNumber = 1\n    !! Iteration number\n  REAL(DFP) :: residualError0 = 0.0\n    !! Initial Residual error\n  REAL(DFP) :: residualError = 0.0\n    !! Current residual error\n  REAL(DFP) :: residualTolerance = 1.0E-5\n    !! Tolerance for checking convergence in residual\n  REAL(DFP) :: solutionError0 = 0.0\n    !! Initial solution error\n  REAL(DFP) :: solutionError = 0.0\n    !! Current solution error\n  REAL(DFP) :: solutionTolerance = 1.0E-5\n    !! Tolerance for checking convergence in solution\n  INTEGER(I4B) :: convergenceType = RelativeConvergence\n    !! Type of convergence\n  INTEGER(I4B) :: convergenceIn = ConvergenceInRes\n    !! Check Convergence in solution and/ or residual\n  INTEGER(I4B) :: normType = NormL2\n    !! Error norm type\n  LOGICAL(LGT) :: converged = .FALSE.\n    !! Status of convergence\n  REAL(DFP) :: timeAtStart = 0.0\n    !! Starting time\n  REAL(DFP) :: timeAtEnd = 0.0\n    !! Present time\n  REAL(DFP), ALLOCATABLE :: convergenceData(:, :)\n    !! history of convergence data\n    !! each column corresponding to a iteration\n  TYPE(String), ALLOCATABLE :: header(:)\n    !! header for convergenceData\nEND TYPE IterationData_\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var r=t(67294);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);