"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[56890],{36580:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var t=i(85893),a=i(11151);const o={},s="GetDiagonal",r={id:"CSRSparsity/GetDiagonal",title:"GetDiagonal",description:"This subroutine returns the diagonal entries of sparse matrix.",source:"@site/docs/docs-api/CSRSparsity/GetDiagonal.md",sourceDirName:"CSRSparsity",slug:"/CSRSparsity/GetDiagonal",permalink:"/docs-api/CSRSparsity/GetDiagonal",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/CSRSparsity/GetDiagonal.md",tags:[],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Display",permalink:"/docs-api/CSRSparsity/Display"},next:{title:"GetNNZ",permalink:"/docs-api/CSRSparsity/GetNNZ"}},d={},l=[];function c(e){const n={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"getdiagonal",children:"GetDiagonal"}),"\n",(0,t.jsx)(n.p,{children:"This subroutine returns the diagonal entries of sparse matrix."}),"\n",(0,t.jsx)(n.p,{children:"This Routine calls the Saad's sparse library."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"offset"}),": containing the ",(0,t.jsx)(n.code,{children:"offset"})," of the wanted diagonal. The diagonal extracted is the one corresponding to the entries ",(0,t.jsx)(n.code,{children:"a(i,j)"})," with ",(0,t.jsx)(n.code,{children:"j-i = offset"}),". Therefore, ",(0,t.jsx)(n.code,{children:"offset = 0"})," means the main diagonal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"diag"})," : real array of length ",(0,t.jsx)(n.code,{children:"nrow"})," containing the wanted diagonal. ",(0,t.jsx)(n.code,{children:"diag"})," contains the diagonal (",(0,t.jsx)(n.code,{children:"a(i,j),j-i = offset"}),") as defined above."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"idiag"})," = integer array. It contains the poisitions of diagonal in the original arrays ",(0,t.jsx)(n.code,{children:"A"}),". If ",(0,t.jsx)(n.code,{children:"idiag(i)=0"})," then it means that there was no diagonal found in ",(0,t.jsx)(n.code,{children:"row=i"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"MODULE SUBROUTINE GetDiagonal( obj, A, diag, idiag, offset )\n  TYPE( CSRSparsity_ ), INTENT( IN ) :: obj\n  REAL( DFP ), INTENT( IN ) :: A( : )\n  REAL( DFP ), ALLOCATABLE, INTENT( INOUT ) :: diag( : )\n    !! Diagonal entries\n  INTEGER( I4B ), ALLOCATABLE, INTENT( INOUT ) :: idiag( : )\n    !! Position of diagonal entries in `A(:)`\n  INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: offset\n    !! offset of the wanted diagonal\nEND SUBROUTINE GetDiagonal\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The following routine is similar to the above routine, however, this routine does not return the position of diagonal in ",(0,t.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"MODULE SUBROUTINE GetDiagonal( obj, A, diag, offset )\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\n  REAL( DFP ), INTENT( IN ) :: A( : )\n    !! Sparse matrix values\n  REAL( DFP ), ALLOCATABLE, INTENT( INOUT ) :: diag( : )\n    !! Diagonal entries\n  INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: offset\n    !! offset of diagonal\nEND SUBROUTINE GetDiagonal\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>s});var t=i(67294);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);