"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[38816],{43414:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>a});var o=t(85893),s=t(11151);const c={},r="Get",i={id:"AbstractBC/Get",title:"Get",description:"Get node number and get nodal value.",source:"@site/docs/docs-api/AbstractBC/Get.md",sourceDirName:"AbstractBC",slug:"/AbstractBC/Get",permalink:"/docs-api/AbstractBC/Get",draft:!1,unlisted:!1,editUrl:"https://github.com/vickysharma0812/vickysharma0812.github.io/tree/main/docs/docs-api/AbstractBC/Get.md",tags:[],version:"current",lastUpdatedAt:1701101849,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Export",permalink:"/docs-api/AbstractBC/Export"},next:{title:"GetDOFNo",permalink:"/docs-api/AbstractBC/GetDOFNo"}},d={},a=[{value:"Interface",id:"interface",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"get",children:"Get"}),"\n",(0,o.jsx)(n.p,{children:"Get node number and get nodal value."}),"\n",(0,o.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Get(obj, nodeNum, nodalValue, times)\n    CLASS(AbstractBC_), INTENT(IN) :: obj\n    INTEGER(I4B), ALLOCATABLE, INTENT(INOUT) :: nodeNum(:)\n    REAL(DFP), OPTIONAL, ALLOCATABLE, INTENT(INOUT) :: nodalValue(:, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: times(:)\n  END SUBROUTINE Get\nEND INTERFACE\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"nodeNum"})," is the global node number of boundary nodes where boundary conditions is prescribed"]}),"\n",(0,o.jsxs)(n.li,{children:["If present ",(0,o.jsx)(n.code,{children:"nodalValue"})," then nodal values of prescribed boundary conditions are returned. The row size of ",(0,o.jsx)(n.code,{children:"nodalValue"})," is always equal to the size of ",(0,o.jsx)(n.code,{children:"nodeNum"}),". The column size if equal to the size of ",(0,o.jsx)(n.code,{children:"times"})," (if present) otherwise 1.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["if ",(0,o.jsx)(n.code,{children:"useFunction"})," is true then ",(0,o.jsx)(n.code,{children:"SpaceFunction"}),", ",(0,o.jsx)(n.code,{children:"SpaceTimeFunction"}),", or ",(0,o.jsx)(n.code,{children:"TimeFunction"}),"  is used for computing the nodal values at the boundary"]}),"\n",(0,o.jsxs)(n.li,{children:["if ",(0,o.jsx)(n.code,{children:"useFunction"})," is false then ",(0,o.jsx)(n.code,{children:"NodalValue"})," should be allocated. In this case, this function checks the ",(0,o.jsx)(n.code,{children:"nodalValueType"}),", and accordingly returns ",(0,o.jsx)(n.code,{children:"nodalValue"})," ."]}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>r});var o=t(67294);const s={},c=o.createContext(s);function r(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);