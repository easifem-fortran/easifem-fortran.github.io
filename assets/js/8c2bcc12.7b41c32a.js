"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[53200],{95442:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>m});var o=n(85893),l=n(11151);const i={author:"Vikas Sharma, Ph.D.",date:"26 July 2022",tags:["Monomial1D/Multiplication"]},s="Monomial1D example 2",t={id:"Monomial1D/Monomial1D_test_2",title:"Monomial1D example 2",description:"This example shows the usage of * operator for [[Monomial1D_]] class. We can only multiply a monomial with another monomial.",source:"@site/docs/docs-api/Monomial1D/Monomial1D_test_2.md",sourceDirName:"Monomial1D",slug:"/Monomial1D/Monomial1D_test_2",permalink:"/docs-api/Monomial1D/Monomial1D_test_2",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/Monomial1D/Monomial1D_test_2.md",tags:[{label:"Monomial1D/Multiplication",permalink:"/docs-api/tags/monomial-1-d-multiplication"}],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{author:"Vikas Sharma, Ph.D.",date:"26 July 2022",tags:["Monomial1D/Multiplication"]},sidebar:"tutorialSidebar",previous:{title:"Monomial1D example 1",permalink:"/docs-api/Monomial1D/Monomial1D_test_1"},next:{title:"Monomial1D example 3",permalink:"/docs-api/Monomial1D/Monomial1D_test_3"}},r={},m=[{value:"Modules and classes",id:"modules-and-classes",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h1,{id:"monomial1d-example-2",children:"Monomial1D example 2"}),"\n",(0,o.jsxs)(a.p,{children:["This example shows the usage of ",(0,o.jsx)(a.code,{children:"*"})," operator for [[Monomial1D_]] class. We can only multiply a monomial with another monomial.\nMultiplying a monomial with a scalar real or integer will produce an instance of [[Polynomial1D_]]."]}),"\n",(0,o.jsx)(a.h2,{id:"modules-and-classes",children:"Modules and classes"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"[[Monomial1D_]]"}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-fortran",children:"PROGRAM main\nuse easifemBase\nuse easifemClasses\nimplicit none\ntype(Monomial1D_) :: y0, y1, y2, y3, ans\n"})}),"\n",(0,o.jsx)(a.p,{children:"Initiate the object."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-fortran",children:'  y0=Monomial1D( degree=0_I4B, varname="x" )\n  y1=Monomial1D( degree=1_I4B, varname="x" )\n  y2=Monomial1D( degree=2_I4B, varname="x" )\n'})}),"\n",(0,o.jsx)(a.p,{children:'!!! note "Multiplication"\nWe can multiply a monomial with another monomial.'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-fortran",children:'  ans = y1 * y0\n  call ans%display( "f(x) = ")\n  ans = y1 * y2\n  call ans%display( "f(x) = ")\n'})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-txt",children:">result\nf(x) =x^1\nf(x) =x^3\n"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-fortran",children:"END PROGRAM main\n"})})]})}function d(e={}){const{wrapper:a}={...(0,l.a)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},11151:(e,a,n)=>{n.d(a,{Z:()=>t,a:()=>s});var o=n(67294);const l={},i=o.createContext(l);function s(e){const a=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),o.createElement(i.Provider,{value:a},e.children)}}}]);