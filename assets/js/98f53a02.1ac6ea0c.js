"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[77780],{66946:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>N,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(85893),a=n(11151);const i={},o="MatVec",c={id:"AbstractMatrixField/MatVec",title:"MatVec",description:"Perform matrix vector multipliction",source:"@site/docs/docs-api/AbstractMatrixField/MatVec.md",sourceDirName:"AbstractMatrixField",slug:"/AbstractMatrixField/MatVec",permalink:"/docs-api/AbstractMatrixField/MatVec",draft:!1,unlisted:!1,editUrl:"https://github.com/vickysharma0812/vickysharma0812.github.io/tree/main/docs/docs-api/AbstractMatrixField/MatVec.md",tags:[],version:"current",lastUpdatedAt:1701103026,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IsPreconditionSet",permalink:"/docs-api/AbstractMatrixField/IsPreconditionSet"},next:{title:"ReversePermutation",permalink:"/docs-api/AbstractMatrixField/ReversePermutation"}},s={},d=[{value:"Interface",id:"interface",level:2}];function l(t){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"matvec",children:"MatVec"}),"\n",(0,r.jsx)(e.p,{children:"Perform matrix vector multipliction"}),"\n",(0,r.jsx)(e.h2,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  SUBROUTINE Matvec1(obj, x, y, isTranspose, addContribution, &\n    & scale)\n    IMPORT :: AbstractMatrixField_, DFP, LGT\n    CLASS(AbstractMatrixField_), INTENT(IN) :: obj\n    REAL(DFP), INTENT(INOUT) :: y(:)\n    !! Output vector y=Ax\n    REAL(DFP), INTENT(IN) :: x(:)\n    !! Input vector in y=Ax\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! True if we have to use TRANSPOSE of matrix\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n    !! Default is FALSE\n    !! if true then we do not set y = 0, and perform\n    !! y = y + matvec(obj, x)\n    !! if false, then we perform y = matvec(obj, x)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n  END SUBROUTINE Matvec1\nEND INTERFACE\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  SUBROUTINE Matvec2(obj, x, y, isTranspose, addContribution, &\n    & scale)\n    IMPORT :: AbstractMatrixField_, AbstractNodeField_, LGT, DFP\n    CLASS(AbstractMatrixField_), INTENT(IN) :: obj\n    CLASS(AbstractNodeField_), INTENT(INOUT) :: y\n    !! Output vector y=Ax\n    CLASS(AbstractNodeField_), INTENT(IN) :: x\n    !! Input vector in y=Ax\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! True if we have to use TRANSPOSE of matrix\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n    !! Default is FALSE\n    !! if true then we do not set y = 0, and perform\n    !! y = y + matvec(obj, x)\n    !! if false, then we perform y = matvec(obj, x)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n  END SUBROUTINE Matvec2\nEND INTERFACE\n"})})]})}function N(t={}){const{wrapper:e}={...(0,a.a)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}},11151:(t,e,n)=>{n.d(e,{Z:()=>c,a:()=>o});var r=n(67294);const a={},i=r.createContext(a);function o(t){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:o(t.components),r.createElement(i.Provider,{value:e},t.children)}}}]);