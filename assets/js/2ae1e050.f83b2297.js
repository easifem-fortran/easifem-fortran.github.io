"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[63441],{54621:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>T,contentTitle:()=>f,default:()=>j,frontMatter:()=>u,metadata:()=>p,toc:()=>N});var t=a(85893),l=a(11151),i=a(74866),s=a(85162);function c(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In this example we will see how to use ",(0,t.jsx)(n.code,{children:"InitiateFacetToCellData"}),". We use\nthis routine to compute the facet to cell data between a cell mesh and a facet mesh. The facet mesh is the boundary of the mesh."]}),"\n",(0,t.jsx)(n.p,{children:"The Cellmesh is shown below."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"mesh_tri3",src:a(22534).Z+"",width:"916",height:"955"})}),"\n",(0,t.jsx)(n.p,{children:"Importing modules and variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( DomainConnectivity_ ) :: obj\n  TYPE( Domain_ ) :: cellDomain\n  TYPE( HDF5File_ ) :: cellDomainFile\n  CHARACTER( LEN=* ), PARAMETER :: cellDomainFileName="./mesh_tri3.h5"\n  CLASS( Mesh_ ), POINTER :: cellMesh\n  CLASS( Mesh_ ), POINTER :: facetMesh\n  CLASS( ReferenceElement_ ), POINTER :: refelem\n  INTEGER( I4B ) :: ii, iel\n'})}),"\n",(0,t.jsx)(n.p,{children:"Open the mesh file for cellDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL cellDomainFile%Initiate( FileName=cellDomainFileName, MODE="READ" )\n  CALL cellDomainFile%Open()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Initiate the cellDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL cellDomain%Initiate( cellDomainFile, "")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Make a pointer to cellMesh and facet mesh"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  cellMesh => cellDomain%getMeshPointer( dim=2, entityNum=1)\n  facetMesh => cellDomain%getMeshPointer( dim=1, entityNum=2 )\n"})}),"\n",(0,t.jsx)(n.p,{children:"Initiate FacetTOCellData."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL obj%InitiateFacetToCellData( facetMesh=facetMesh, &\n    & cellMesh=cellMesh, dim=2, entityNum=1, isMaster=.TRUE. )\n  CALL obj%DisplayFacetToCellData( msg="facetToCell=" )\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL cellDomainFile%Deallocate()\n  CALL cellDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function r(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}function o(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In this example we will see how to use ",(0,t.jsx)(n.code,{children:"InitiateFacetToCellData"}),". We use\nthis routine to compute the facet to cell data between a cell mesh and a facet mesh. The facet mesh is the boundary of the mesh. This example is similar to the example 21, but in this case we use ",(0,t.jsx)(n.code,{children:"isMaster=.FALSE."})]}),"\n",(0,t.jsx)(n.p,{children:"The Cellmesh is shown below."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"mesh_tri3",src:a(39956).Z+"",width:"916",height:"955"})}),"\n",(0,t.jsx)(n.p,{children:"Importing modules and variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( DomainConnectivity_ ) :: obj\n  TYPE( Domain_ ) :: cellDomain\n  TYPE( HDF5File_ ) :: cellDomainFile\n  CHARACTER( LEN=* ), PARAMETER :: cellDomainFileName="./mesh_tri3b.h5"\n  CLASS( Mesh_ ), POINTER :: cellMesh\n  CLASS( Mesh_ ), POINTER :: facetMesh\n  CLASS( ReferenceElement_ ), POINTER :: refelem\n  INTEGER( I4B ) :: ii, iel\n'})}),"\n",(0,t.jsx)(n.p,{children:"Open the mesh file for cellDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL cellDomainFile%Initiate( FileName=cellDomainFileName, MODE="READ" )\n  CALL cellDomainFile%Open()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Initiate the cellDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL cellDomain%Initiate( cellDomainFile, "")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Make a pointer to cellMesh and facet mesh"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  cellMesh => cellDomain%getMeshPointer( dim=2, entityNum=1)\n  facetMesh => cellDomain%getMeshPointer( dim=1, entityNum=7 )\n"})}),"\n",(0,t.jsx)(n.p,{children:"Initiate FacetTOCellData."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL obj%InitiateFacetToCellData( facetMesh=facetMesh, &\n    & cellMesh=cellMesh, dim=2, entityNum=1, isMaster=.TRUE. )\n  CALL obj%DisplayFacetToCellData( msg="facetToCell=" )\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL cellDomainFile%Deallocate()\n  CALL cellDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}function d(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In this example we will see how to use ",(0,t.jsx)(n.code,{children:"InitiateFacetToCellData"}),". We use this routine to compute the facet to cell data between a cell domain and a facet mesh. The facet mesh is the internal boundary of the domain."]}),"\n",(0,t.jsx)(n.p,{children:"The Cellmesh is shown below."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"mesh_tri3",src:a(22534).Z+"",width:"916",height:"955"})}),"\n",(0,t.jsx)(n.p,{children:"Importing modules and variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( DomainConnectivity_ ) :: obj\n  TYPE( Domain_ ) :: cellDomain\n  TYPE( HDF5File_ ) :: cellDomainFile\n  CHARACTER( LEN=* ), PARAMETER :: cellDomainFileName="./mesh_tri3.h5"\n  CLASS( Mesh_ ), POINTER :: cellMesh\n  CLASS( Mesh_ ), POINTER :: facetMesh\n  CLASS( ReferenceElement_ ), POINTER :: refelem\n  INTEGER( I4B ) :: ii, iel\n'})}),"\n",(0,t.jsx)(n.p,{children:"Open the mesh file for cellDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL cellDomainFile%Initiate( FileName=cellDomainFileName, MODE="READ" )\n  CALL cellDomainFile%Open()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Initiate the cellDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL cellDomain%Initiate( cellDomainFile, "")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Make a pointer to cellMesh and facet mesh"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  facetMesh => cellDomain%getMeshPointer( dim=1, entityNum=2 )\n"})}),"\n",(0,t.jsx)(n.p,{children:"Initiate FacetTOCellData."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL obj%InitiateFacetToCellData( facetMesh=facetMesh, &\n    & cellDomain=cellDomain )\n  CALL obj%DisplayFacetToCellData( msg="facetToCell=" )\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL cellDomainFile%Deallocate()\n  CALL cellDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function m(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}const u={},f="InitiateFacetToCellData",p={id:"DomainConnectivity/InitiateFacetToCellData",title:"InitiateFacetToCellData",description:"This method creates the facet to cell element-data.",source:"@site/docs/docs-api/DomainConnectivity/InitiateFacetToCellData.md",sourceDirName:"DomainConnectivity",slug:"/DomainConnectivity/InitiateFacetToCellData",permalink:"/docs-api/DomainConnectivity/InitiateFacetToCellData",draft:!1,unlisted:!1,editUrl:"https://github.com/easifem-fortran/easifem-fortran.github.io/tree/main/docs/docs-api/DomainConnectivity/InitiateFacetToCellData.md",tags:[],version:"current",lastUpdatedAt:1701057211,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"InitiateCellToCellData",permalink:"/docs-api/DomainConnectivity/InitiateCellToCellData"},next:{title:"InitiateNodeToNodeData",permalink:"/docs-api/DomainConnectivity/InitiateNodeToNodes"}},T={},N=[{value:"Interface1",id:"interface1",level:2},{value:"Interface2",id:"interface2",level:2},{value:"Interface3",id:"interface3",level:2},{value:"Interface4",id:"interface4",level:2}];function I(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"initiatefacettocelldata",children:"InitiateFacetToCellData"}),"\n",(0,t.jsx)(n.p,{children:"This method creates the facet to cell element-data."}),"\n",(0,t.jsx)(n.p,{children:"In this method we set the relation between element of a facet mesh (Facet elements) and master and slave domain."}),"\n",(0,t.jsx)(n.p,{children:"A facet mesh usually denotes the boundary or part of boundary of master and slave domain."}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Please make sure that ",(0,t.jsx)(n.code,{children:"nodeToElements"})," data is initiated in the cell mesh (or domain) before calling this routine."]})}),"\n",(0,t.jsx)(n.h2,{id:"interface1",children:"Interface1"}),"\n","\n","\n",(0,t.jsxs)(i.Z,{children:[(0,t.jsxs)(s.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE InitiateFacetToCellData(obj, facetMesh, &\n    & cellMesh, dim, entityNum, isMaster)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Domain connectivity data\n    CLASS(Mesh_), INTENT(INOUT) :: facetMesh\n    !! Mesh of facet elements\n    CLASS(Mesh_), INTENT(INOUT) :: cellMesh\n    !! Master mesh\n    INTEGER(I4B), INTENT(IN) :: dim\n    INTEGER(I4B), INTENT(IN) :: entityNum\n    LOGICAL(LGT), INTENT(IN) :: isMaster\n    !! if true then cell Mesh is master cell\n    !! if false then cell mesh is slave cell\n  END SUBROUTINE InitiateFacetToCellData\nEND INTERFACE\n"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This routine initiate ",(0,t.jsx)(n.code,{children:"facetToCell"})," for given facetMesh and CellMesh"]}),"\n",(0,t.jsx)(n.li,{children:"In this case facetMesh should be a boundary of cellMesh"}),"\n",(0,t.jsx)(n.li,{children:"This routine should not be used for internal boundary."}),"\n"]})]}),(0,t.jsx)(s.Z,{value:"1",label:"\ufe0f\u0700 Example 1",children:(0,t.jsx)(r,{})}),(0,t.jsx)(s.Z,{value:"2",label:"\ufe0f\u0700 Example 2",children:(0,t.jsx)(h,{})}),(0,t.jsx)(s.Z,{value:"close",label:"\u21a2 "})]}),"\n",(0,t.jsx)(n.h2,{id:"interface2",children:"Interface2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE InitiateFacetToCellData(obj, facetMesh, &\n    & masterDomain, slaveDomain)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Mesh connectivity data\n    CLASS(Mesh_), INTENT(INOUT) :: facetMesh\n    !! Mesh of facet elements\n    CLASS(Domain_), INTENT(INOUT) :: masterDomain\n    !! Domain of master elements\n    CLASS(Domain_), INTENT(INOUT) :: slaveDomain\n    !! Domain of slave elements\n  END SUBROUTINE InitiateFacetToCellData\nEND INTERFACE\n"})}),"\n",(0,t.jsx)(n.p,{children:"This subroutine generates the faceToCell connectivity data between masterDomain, slaveDomain and faceMesh."}),"\n",(0,t.jsxs)(n.p,{children:["In this case facetMesh should a boundary of masterDomain and slaveDomain. In otherwords, facetMesh cannot represent the internal boundary.\nThis routine calls ",(0,t.jsx)(n.code,{children:"InitiateFacetToCellData1"})," routine."]}),"\n",(0,t.jsx)(n.h2,{id:"interface3",children:"Interface3"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE dc_InitiateFacetToCellData3(obj, facetMesh, &\n    & cellMesh, dim, entityNum)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Domain connectivity data\n    CLASS(Mesh_), INTENT(INOUT) :: facetMesh\n    !! Mesh of facet elements\n    CLASS(Mesh_), INTENT(INOUT) :: cellMesh\n    !! Master mesh\n    INTEGER(I4B), INTENT(IN) :: dim\n    INTEGER(I4B), INTENT(IN) :: entityNum\n  END SUBROUTINE dc_InitiateFacetToCellData3\nEND INTERFACE\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This routine initiate ",(0,t.jsx)(n.code,{children:"facetToCell"})," for given facetMesh and CellMesh"]}),"\n",(0,t.jsx)(n.li,{children:"In this case facetMesh can be an internal boundary of cellMesh"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"interface4",children:"Interface4"}),"\n",(0,t.jsxs)(i.Z,{children:[(0,t.jsxs)(s.Z,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE InitiateFacetToCellData(obj, facetMesh, cellDomain)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Domain connectivity data\n    CLASS(Mesh_), INTENT(INOUT) :: facetMesh\n    !! Mesh of facet elements\n    CLASS(Domain_), INTENT(INOUT) :: cellDomain\n    !! Master mesh\n  END SUBROUTINE InitiateFacetToCellData\nEND INTERFACE\n"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This routine initiates ",(0,t.jsx)(n.code,{children:"facetToCell"})," for given facetMesh and CellMesh"]}),"\n",(0,t.jsx)(n.li,{children:"In this case facetMesh can be an internal boundary of cellMesh"}),"\n"]})]}),(0,t.jsx)(s.Z,{value:"example",label:"\ufe0f\u0700 See example",children:(0,t.jsx)(m,{})}),(0,t.jsx)(s.Z,{value:"close",label:"\u21a2 "})]})]})}function j(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(I,{...e})}):I(e)}},85162:(e,n,a)=>{a.d(n,{Z:()=>s});a(67294);var t=a(86010);const l={tabItem:"tabItem_Ymn6"};var i=a(85893);function s(e){let{children:n,hidden:a,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.Z)(l.tabItem,s),hidden:a,children:n})}},74866:(e,n,a)=>{a.d(n,{Z:()=>C});var t=a(67294),l=a(86010),i=a(12466),s=a(16550),c=a(20469),r=a(91980),o=a(67392),h=a(50012);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:l}}=e;return{value:n,label:a,attributes:t,default:l}}))}(a);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function u(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:a}=e;const l=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,r._X)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(l.location.search);n.set(i,e),l.replace({...l.location,search:n.toString()})}),[i,l])]}function p(e){const{defaultValue:n,queryString:a=!1,groupId:l}=e,i=m(e),[s,r]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[o,d]=f({queryString:a,groupId:l}),[p,T]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,i]=(0,h.Nk)(a);return[l,(0,t.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:l}),N=(()=>{const e=o??p;return u({value:e,tabValues:i})?e:null})();(0,c.Z)((()=>{N&&r(N)}),[N]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),d(e),T(e)}),[d,T,i]),tabValues:i}}var T=a(72389);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var I=a(85893);function j(e){let{className:n,block:a,selectedValue:t,selectValue:s,tabValues:c}=e;const r=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.o5)(),h=e=>{const n=e.currentTarget,a=r.indexOf(n),l=c[a].value;l!==t&&(o(n),s(l))},d=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=r.indexOf(e.currentTarget)+1;n=r[a]??r[0];break}case"ArrowLeft":{const a=r.indexOf(e.currentTarget)-1;n=r[a]??r[r.length-1];break}}n?.focus()};return(0,I.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},n),children:c.map((e=>{let{value:n,label:a,attributes:i}=e;return(0,I.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>r.push(e),onKeyDown:d,onClick:h,...i,className:(0,l.Z)("tabs__item",N.tabItem,i?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function D(e){let{lazy:n,children:a,selectedValue:l}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===l));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,I.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function x(e){const n=p(e);return(0,I.jsxs)("div",{className:(0,l.Z)("tabs-container",N.tabList),children:[(0,I.jsx)(j,{...e,...n}),(0,I.jsx)(D,{...e,...n})]})}function C(e){const n=(0,T.Z)();return(0,I.jsx)(x,{...e,children:d(e.children)},String(n))}},22534:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/mesh_tri3-f040e740b2563c42265e62d3b8a5d5cf.png"},39956:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/mesh_tri3b-e4caf0f1ab28b5d0a2edb9436ec296e2.png"},11151:(e,n,a)=>{a.d(n,{Z:()=>c,a:()=>s});var t=a(67294);const l={},i=t.createContext(l);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);